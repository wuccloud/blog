<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>从0到1学习NestJs(三)</title>
      <link href="/2024/12/29/%E4%BB%8E0%E5%88%B01%20%E5%AD%A6%E4%B9%A0NestJs(%E4%B8%89)%20/"/>
      <url>/2024/12/29/%E4%BB%8E0%E5%88%B01%20%E5%AD%A6%E4%B9%A0NestJs(%E4%B8%89)%20/</url>
      
        <content type="html"><![CDATA[<h1 id="从-0-到-1-学习-NestJS-三-请求处理、响应处理、DTO-与验证"><a href="#从-0-到-1-学习-NestJS-三-请求处理、响应处理、DTO-与验证" class="headerlink" title="从 0 到 1 学习 NestJS (三) - 请求处理、响应处理、DTO 与验证"></a>从 0 到 1 学习 NestJS (三) - 请求处理、响应处理、DTO 与验证</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在前面的文章中，我们学习了 NestJS 的基础概念，包括模块、控制器和服务。本篇将深入探讨请求处理、响应处理、数据传输对象 (DTO) 以及验证，这些都是构建健壮 API 的关键部分。</p><h2 id="1-请求处理"><a href="#1-请求处理" class="headerlink" title="1. 请求处理"></a>1. 请求处理</h2><h3 id="1-1-获取请求参数"><a href="#1-1-获取请求参数" class="headerlink" title="1.1 获取请求参数"></a>1.1 获取请求参数</h3><p>NestJS 提供了多种方式来获取客户端请求中的参数：</p><ul><li><p><strong>路径参数 (<code>@Param()</code>):</strong> 从 URL 路径中获取参数。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Controller</span>, <span class="title class_">Get</span>, <span class="title class_">Param</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">&#x27;products&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ProductsController</span> &#123;</span><br><span class="line">  <span class="meta">@Get</span>(<span class="string">&#x27;:id&#x27;</span>)</span><br><span class="line">  <span class="title function_">getProduct</span>(<span class="meta">@Param</span>(<span class="string">&#x27;id&#x27;</span>) <span class="attr">id</span>: <span class="built_in">string</span>): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`Product ID: <span class="subst">$&#123;id&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问 <code>http://localhost:3000/products/123</code>，你会看到 “Product ID: 123”。</p></li><li><p><strong>查询参数 (<code>@Query()</code>):</strong> 从 URL 查询字符串中获取参数。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Controller</span>, <span class="title class_">Get</span>, <span class="title class_">Query</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">&#x27;search&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">SearchController</span> &#123;</span><br><span class="line">  <span class="meta">@Get</span>()</span><br><span class="line">  <span class="title function_">search</span>(<span class="meta">@Query</span>(<span class="string">&#x27;keyword&#x27;</span>) <span class="attr">keyword</span>: <span class="built_in">string</span>): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`Search keyword: <span class="subst">$&#123;keyword&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问 <code>http://localhost:3000/search?keyword=apple</code>，你会看到 “Search keyword: apple”。</p></li><li><p><strong>请求体 (<code>@Body()</code>):</strong>  从请求体中获取数据，通常用于 POST、PUT 等请求。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Controller</span>, <span class="title class_">Post</span>, <span class="title class_">Body</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">&#x27;posts&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">PostsController</span> &#123;</span><br><span class="line">  <span class="meta">@Post</span>()</span><br><span class="line">  <span class="title function_">createPost</span>(<span class="meta">@Body</span>() <span class="attr">body</span>: &#123; <span class="attr">title</span>: <span class="built_in">string</span>; <span class="attr">content</span>: <span class="built_in">string</span> &#125;): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`Post Created: <span class="subst">$&#123;body.title&#125;</span> - <span class="subst">$&#123;body.content&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 Postman 或其他工具发送 POST 请求到 <code>http://localhost:3000/posts</code>，请求体为 <code>&#123;&quot;title&quot;: &quot;My Post&quot;, &quot;content&quot;: &quot;This is my post content&quot;&#125;</code>，你会看到 “Post Created: My Post - This is my post content”。</p></li></ul><h3 id="1-2-不同的-HTTP-方法"><a href="#1-2-不同的-HTTP-方法" class="headerlink" title="1.2  不同的 HTTP 方法"></a>1.2  不同的 HTTP 方法</h3><p>NestJS 支持各种 HTTP 方法，例如 GET、POST、PUT、DELETE、PATCH 等。你可以使用 <code>@Get()</code>, <code>@Post()</code>, <code>@Put()</code>, <code>@Delete()</code>, <code>@Patch()</code> 等装饰器来定义不同 HTTP 方法的路由。</p><h2 id="2-响应处理"><a href="#2-响应处理" class="headerlink" title="2. 响应处理"></a>2. 响应处理</h2><h3 id="2-1-返回-JSON-数据"><a href="#2-1-返回-JSON-数据" class="headerlink" title="2.1  返回 JSON 数据"></a>2.1  返回 JSON 数据</h3><p>默认情况下，NestJS 会将控制器方法返回的值转换为 JSON 数据，并作为 HTTP 响应返回。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Controller</span>, <span class="title class_">Get</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">&#x27;users&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UsersController</span> &#123;</span><br><span class="line">  <span class="meta">@Get</span>()</span><br><span class="line">  <span class="title function_">getUsers</span>(): <span class="built_in">any</span>[] &#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;John Doe&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;Jane Doe&#x27;</span> &#125;,</span><br><span class="line">    ];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>访问 <a href="http://localhost:3000/users%EF%BC%8C%E4%BD%A0%E4%BC%9A%E7%9C%8B%E5%88%B0%E4%B8%80%E4%B8%AA">http://localhost:3000/users，你会看到一个</a> JSON 数组。</p><h3 id="设置-HTTP-状态码"><a href="#设置-HTTP-状态码" class="headerlink" title="设置 HTTP 状态码"></a>设置 HTTP 状态码</h3><p>你可以使用 @HttpCode() 装饰器来设置 HTTP 状态码。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Controller</span>, <span class="title class_">Get</span>, <span class="title class_">HttpCode</span>, <span class="title class_">HttpStatus</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">&#x27;status&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">StatusController</span> &#123;</span><br><span class="line">  <span class="meta">@Get</span>(<span class="string">&#x27;ok&#x27;</span>)</span><br><span class="line">  <span class="meta">@HttpCode</span>(<span class="title class_">HttpStatus</span>.<span class="property">OK</span>)</span><br><span class="line">  <span class="title function_">ok</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;OK&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问 <a href="http://localhost:3000/status/ok%EF%BC%8C%E4%BD%A0%E4%BC%9A%E7%9C%8B%E5%88%B0">http://localhost:3000/status/ok，你会看到</a> HTTP 状态码为 200。</p><h3 id="使用-Response-对象"><a href="#使用-Response-对象" class="headerlink" title="使用 Response 对象"></a>使用 Response 对象</h3><p>你可以使用 Response 对象来更灵活地控制响应，例如设置响应头、状态码和响应体。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Controller</span>, <span class="title class_">Get</span>, <span class="title class_">Res</span>, <span class="title class_">HttpStatus</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Response</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;express&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">&#x27;custom&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">CustomController</span> &#123;</span><br><span class="line">  <span class="meta">@Get</span>()</span><br><span class="line">  <span class="title function_">customResponse</span>(<span class="meta">@Res</span>() <span class="attr">res</span>: <span class="title class_">Response</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="title class_">HttpStatus</span>.<span class="property">OK</span>).<span class="title function_">json</span>(&#123; <span class="attr">message</span>: <span class="string">&#x27;Custom Response&#x27;</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问 <a href="http://localhost:3000/custom%EF%BC%8C%E4%BD%A0%E4%BC%9A%E7%9C%8B%E5%88%B0">http://localhost:3000/custom，你会看到</a> JSON 响应，并且 HTTP 状态码为 200。</p><h2 id="数据传输对象-DTO"><a href="#数据传输对象-DTO" class="headerlink" title="数据传输对象 (DTO)"></a>数据传输对象 (DTO)</h2><h3 id="什么是-DTO"><a href="#什么是-DTO" class="headerlink" title="什么是 DTO"></a>什么是 DTO</h3><p>DTO (Data Transfer Object) 是一种用于在应用程序的不同层之间传输数据的对象。在 NestJS 中，DTO 通常用于定义请求体的数据结构，并用于数据验证。</p><h3 id="创建-DTO"><a href="#创建-DTO" class="headerlink" title="创建 DTO"></a>创建 DTO</h3><p>我们可以使用 Nest CLI 创建 DTO。在终端中，切换到你的项目目录，然后执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nest g class dtos/create-post --no-spec</span><br></pre></td></tr></table></figure><p>这会在 src&#x2F;dtos 目录下创建一个 create-post.dto.ts 文件。<br>create-post.dto.ts 文件内容</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/dtos/create-post.dto.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">CreatePostDto</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">content</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在控制器中使用-DTO"><a href="#在控制器中使用-DTO" class="headerlink" title="在控制器中使用 DTO"></a>在控制器中使用 DTO</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Controller</span>, <span class="title class_">Post</span>, <span class="title class_">Body</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">CreatePostDto</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../dtos/create-post.dto&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">&#x27;posts&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">PostsController</span> &#123;</span><br><span class="line">  <span class="meta">@Post</span>()</span><br><span class="line">  <span class="title function_">createPost</span>(<span class="meta">@Body</span>() <span class="attr">createPostDto</span>: <span class="title class_">CreatePostDto</span>): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`Post Created: <span class="subst">$&#123;createPostDto.title&#125;</span> - <span class="subst">$&#123;createPostDto.content&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><h3 id="安装-class-validator-和-class-transformer"><a href="#安装-class-validator-和-class-transformer" class="headerlink" title="安装 class-validator 和 class-transformer"></a>安装 class-validator 和 class-transformer</h3><p>在 NestJS 中，我们通常使用 class-validator 和 class-transformer 包来进行数据验证。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install class-validator class-transformer</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">yarn add class-validator class-transformer</span><br></pre></td></tr></table></figure><h3 id="使用验证装饰器"><a href="#使用验证装饰器" class="headerlink" title="使用验证装饰器"></a>使用验证装饰器</h3><p>我们可以在 DTO 中使用 class-validator 提供的验证装饰器来定义验证规则。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/dtos/create-post.dto.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">IsNotEmpty</span>, <span class="title class_">IsString</span>, <span class="title class_">MinLength</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;class-validator&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">CreatePostDto</span> &#123;</span><br><span class="line">  <span class="meta">@IsNotEmpty</span>()</span><br><span class="line">  <span class="meta">@IsString</span>()</span><br><span class="line">  <span class="meta">@MinLength</span>(<span class="number">5</span>)</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@IsNotEmpty</span>()</span><br><span class="line">  <span class="meta">@IsString</span>()</span><br><span class="line">  <span class="attr">content</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="启用全局验证管道"><a href="#启用全局验证管道" class="headerlink" title="启用全局验证管道"></a>启用全局验证管道</h3><p>在 main.ts 中启用全局验证管道：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/main.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NestFactory</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.module&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ValidationPipe</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>; <span class="comment">// 引入 ValidationPipe</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">bootstrap</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> app = <span class="keyword">await</span> <span class="title class_">NestFactory</span>.<span class="title function_">create</span>(<span class="title class_">AppModule</span>);</span><br><span class="line">  app.<span class="title function_">useGlobalPipes</span>(<span class="keyword">new</span> <span class="title class_">ValidationPipe</span>()); <span class="comment">// 启用全局验证管道</span></span><br><span class="line">  <span class="keyword">await</span> app.<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">bootstrap</span>();</span><br></pre></td></tr></table></figure><p>现在，当请求体数据不符合 DTO 中定义的验证规则时，NestJS 会自动返回 400 错误。</p><p>总结</p><p>在本篇文章中，我们学习了如何处理请求参数、响应数据，以及如何使用 DTO 和验证来构建健壮的 API。我们了解了路径参数、查询参数、请求体，以及如何设置 HTTP 状态码和响应。我们还学习了如何使用 class-validator 和 class-transformer 来验证请求数据。</p><p>在下一篇文章中，我们将学习如何使用 NestJS 连接数据库，并实现数据的持久化。</p><p><strong>说明:</strong></p><ul><li><strong>详细步骤:</strong>  文档包含了处理请求参数、响应数据以及使用 DTO 和验证的详细步骤。</li><li><strong>代码示例:</strong>  提供了大量代码示例，方便理解。</li><li><strong>概念解释:</strong>  对 DTO 和验证进行了详细的解释。</li><li><strong>实践操作:</strong>  提供了完整的实例，可以实际操作并验证。</li><li><strong>结构清晰:</strong>  使用了 Markdown 语法，结构清晰，易于阅读。</li><li><strong>实用性强:</strong>  文章内容实用，可以帮助你构建更健壮的 NestJS 应用。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NestJs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从0到1学习NestJs(二)</title>
      <link href="/2024/12/29/%E4%BB%8E0%E5%88%B01%20%E5%AD%A6%E4%B9%A0NestJs(%E4%BA%8C)%20/"/>
      <url>/2024/12/29/%E4%BB%8E0%E5%88%B01%20%E5%AD%A6%E4%B9%A0NestJs(%E4%BA%8C)%20/</url>
      
        <content type="html"><![CDATA[<h1 id="从-0-到-1-学习-NestJS-二-模块、控制器与服务"><a href="#从-0-到-1-学习-NestJS-二-模块、控制器与服务" class="headerlink" title="从 0 到 1 学习 NestJS (二) - 模块、控制器与服务"></a>从 0 到 1 学习 NestJS (二) - 模块、控制器与服务</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在上一篇文章中，我们搭建了 NestJS 的开发环境，并了解了一些基础概念。本篇是第二部分，我们将深入学习 NestJS 的核心组件：模块（Module）、控制器（Controller）和服务（Service），并通过一个简单的用户管理示例来实践这些概念。</p><h2 id="模块-Module"><a href="#模块-Module" class="headerlink" title="模块 (Module)"></a>模块 (Module)</h2><h3 id="模块的作用"><a href="#模块的作用" class="headerlink" title="模块的作用"></a>模块的作用</h3><p>模块是 NestJS 应用程序的基本组织单元。它们用于封装和管理相关的控制器、服务和依赖。模块可以导入其他模块，从而实现代码的复用和模块化。</p><h3 id="创建模块"><a href="#创建模块" class="headerlink" title="创建模块"></a>创建模块</h3><p>我们可以使用 Nest CLI 来创建一个新的模块。在终端中，进入你的项目目录，执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nest g module <span class="built_in">users</span></span><br></pre></td></tr></table></figure><p>这会在 src&#x2F; 目录下创建一个 users 目录，其中包含 users.module.ts 文件。</p><p>users.module.ts 内容</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Module</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [],</span><br><span class="line">  <span class="attr">controllers</span>: [],</span><br><span class="line">  <span class="attr">providers</span>: [],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UsersModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>这个模块目前是空的，我们将在后续步骤中添加控制器和服务。</p><h3 id="模块的导入"><a href="#模块的导入" class="headerlink" title="模块的导入"></a>模块的导入</h3><p>要使用 UsersModule，需要在 AppModule 中导入它。打开 src&#x2F;app.module.ts 文件，修改如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Module</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppController</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.controller&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.service&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">UsersModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./users/users.module&#x27;</span>; <span class="comment">// 导入 UsersModule</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [<span class="title class_">UsersModule</span>], <span class="comment">// 导入 UsersModule</span></span><br><span class="line">  <span class="attr">controllers</span>: [<span class="title class_">AppController</span>],</span><br><span class="line">  <span class="attr">providers</span>: [<span class="title class_">AppService</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="控制器-Controller"><a href="#控制器-Controller" class="headerlink" title="控制器 (Controller)"></a>控制器 (Controller)</h2><h3 id="控制器的作用"><a href="#控制器的作用" class="headerlink" title="控制器的作用"></a>控制器的作用</h3><p>控制器负责接收客户端的请求，并将请求路由到对应的处理程序。控制器通常与 HTTP 方法（GET、POST、PUT、DELETE 等）和路由路径相关联。</p><h3 id="创建控制器"><a href="#创建控制器" class="headerlink" title="创建控制器"></a>创建控制器</h3><p>使用 Nest CLI 创建一个 Users 控制器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nest g controller <span class="built_in">users</span></span><br></pre></td></tr></table></figure><p>这会在 src&#x2F;users&#x2F; 目录下创建一个 users.controller.ts 文件。<br>users.controller.ts 内容</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Controller</span>, <span class="title class_">Get</span>, <span class="title class_">Post</span>, <span class="title class_">Body</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">&#x27;users&#x27;</span>) <span class="comment">// 设置路由前缀为 /users</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UsersController</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Get</span>()</span><br><span class="line">  <span class="title function_">findAll</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;This action returns all users&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Post</span>()</span><br><span class="line">  <span class="title function_">create</span>(<span class="meta">@Body</span>() <span class="attr">user</span>: <span class="built_in">any</span>): <span class="built_in">string</span> &#123; <span class="comment">// 获取请求体中的数据</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">`Create user with name: <span class="subst">$&#123;user.name&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>@Controller(&#39;users&#39;) 装饰器设置了路由前缀为 /users。@Get() 装饰器定义了一个处理 GET 请求的路由，路径为 /users。@Post() 装饰器定义了一个处理 POST 请求的路由，路径为 /users，并且使用 @Body() 装饰器获取请求体中的数据。</code></pre><h3 id="注册控制器"><a href="#注册控制器" class="headerlink" title="注册控制器"></a>注册控制器</h3><p>要使用 UsersController，需要在 UsersModule 中注册它。修改 src&#x2F;users&#x2F;users.module.ts 文件：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Module</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">UsersController</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./users.controller&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [],</span><br><span class="line">  <span class="attr">controllers</span>: [<span class="title class_">UsersController</span>], <span class="comment">// 注册 UsersController</span></span><br><span class="line">  <span class="attr">providers</span>: [],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UsersModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="服务-Service"><a href="#服务-Service" class="headerlink" title="服务 (Service)"></a>服务 (Service)</h2><h3 id="服务的作用"><a href="#服务的作用" class="headerlink" title="服务的作用"></a>服务的作用</h3><p>服务负责处理应用程序的业务逻辑，通常与数据访问、业务规则等相关。服务可以被控制器或其他服务注入和使用。</p><h3 id="创建服务"><a href="#创建服务" class="headerlink" title="创建服务"></a>创建服务</h3><p>使用 Nest CLI 创建一个 Users 服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nest g service <span class="built_in">users</span></span><br></pre></td></tr></table></figure><p>这会在 src&#x2F;users&#x2F; 目录下创建一个 users.service.ts 文件。</p><h3 id="users-service-ts-内容"><a href="#users-service-ts-内容" class="headerlink" title="users.service.ts 内容"></a>users.service.ts 内容</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UsersService</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> users = []; <span class="comment">// 模拟用户数据</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">findAll</span>(): <span class="built_in">any</span>[] &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">users</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">create</span>(<span class="attr">user</span>: <span class="built_in">any</span>): <span class="built_in">any</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">users</span>.<span class="title function_">push</span>(user);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>@Injectable() 装饰器定义了一个服务。findAll() 方法返回所有用户数据。create() 方法创建一个新的用户并将其添加到用户列表中。</code></pre><h3 id="注册服务并使用"><a href="#注册服务并使用" class="headerlink" title="注册服务并使用"></a>注册服务并使用</h3><p>要使用 UsersService，需要在 UsersModule 中注册它，并在 UsersController 中注入它。</p><p>首先，修改 src&#x2F;users&#x2F;users.module.ts 文件：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Module</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">UsersController</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./users.controller&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">UsersService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./users.service&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [],</span><br><span class="line">  <span class="attr">controllers</span>: [<span class="title class_">UsersController</span>],</span><br><span class="line">  <span class="attr">providers</span>: [<span class="title class_">UsersService</span>], <span class="comment">// 注册 UsersService</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UsersModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>然后，修改 src&#x2F;users&#x2F;users.controller.ts 文件：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Controller</span>, <span class="title class_">Get</span>, <span class="title class_">Post</span>, <span class="title class_">Body</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">UsersService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./users.service&#x27;</span>; <span class="comment">// 导入 UsersService</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">&#x27;users&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UsersController</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> usersService: UsersService</span>) &#123;&#125; <span class="comment">// 注入 UsersService</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@Get</span>()</span><br><span class="line">  <span class="title function_">findAll</span>(): <span class="built_in">any</span>[] &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">usersService</span>.<span class="title function_">findAll</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Post</span>()</span><br><span class="line">  <span class="title function_">create</span>(<span class="meta">@Body</span>() <span class="attr">user</span>: <span class="built_in">any</span>): <span class="built_in">any</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">usersService</span>.<span class="title function_">create</span>(user);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>现在，我们可以测试我们的用户管理功能。</p><pre><code>GET /users: 访问 http://localhost:3000/users，你会看到一个空的数组 []，因为我们还没有创建任何用户。POST /users: 使用 Postman 或 curl 等工具发送一个 POST 请求到 http://localhost:3000/users，并在请求体中添加 JSON 数据，例如：</code></pre><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;John Doe&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;john.doe@example.com&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>你会看到服务器返回你发送的数据。<br>再次 GET &#x2F;users: 再次访问 <a href="http://localhost:3000/users%EF%BC%8C%E4%BD%A0%E4%BC%9A%E7%9C%8B%E5%88%B0%E5%88%9A%E5%88%9A%E5%88%9B%E5%BB%BA%E7%9A%84%E7%94%A8%E6%88%B7%E6%95%B0%E6%8D%AE%E3%80%82">http://localhost:3000/users，你会看到刚刚创建的用户数据。</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在本篇文章中，我们深入学习了 NestJS 的模块、控制器和服务，并通过一个简单的用户管理示例来实践这些概念。我们学习了如何使用 Nest CLI 创建模块、控制器和服务，如何注册它们，以及如何在控制器中使用服务。</p><p>在下一篇文章中，我们将学习如何使用 DTOs (Data Transfer Objects) 来验证请求数据，并引入数据库持久化。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**说明:**</span><br><span class="line"></span><br><span class="line">*   **详细步骤:** 文档包含了详细的步骤，从创建模块到测试接口。</span><br><span class="line">*   **代码示例:** 提供了关键的代码示例，方便理解。</span><br><span class="line">*   **概念解释:** 对模块、控制器和服务的概念进行了详细解释。</span><br><span class="line">*   **实践案例:** 通过一个简单的用户管理功能来实践这些概念。</span><br><span class="line">*   **测试步骤:** 提供了测试接口的步骤。</span><br><span class="line">*   **可读性:** 使用了 Markdown 语法，使文档具有良好的可读性。</span><br></pre></td></tr></table></figure><p>敬请期待！</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NestJs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从0到1学习NestJs(一)</title>
      <link href="/2024/12/29/%E4%BB%8E0%E5%88%B01%E5%AD%A6%E4%B9%A0NestJs(%E4%B8%80)/"/>
      <url>/2024/12/29/%E4%BB%8E0%E5%88%B01%E5%AD%A6%E4%B9%A0NestJs(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<h1 id="从-0-到-1-学习-NestJS-一-环境搭建与基础概念"><a href="#从-0-到-1-学习-NestJS-一-环境搭建与基础概念" class="headerlink" title="从 0 到 1 学习 NestJS (一) - 环境搭建与基础概念"></a>从 0 到 1 学习 NestJS (一) - 环境搭建与基础概念</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>NestJS 是一个用于构建高效、可扩展的 Node.js 服务器端应用程序的框架。它使用了 TypeScript，并深受 Angular 的影响，提供了模块化、可测试和易维护的架构。本系列文章将从零开始，带你逐步了解 NestJS 的核心概念和开发实践。</p><p>本篇是第一部分，我们将专注于环境搭建和一些基础概念的理解。</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>在开始之前，你需要确保你的机器上已经安装了以下工具：</p><ul><li><strong>Node.js (&gt;&#x3D; 16.x):</strong>  NestJS 需要 Node.js 环境。你可以从 <a href="https://nodejs.org/">https://nodejs.org</a> 下载安装。</li><li><strong>npm (&gt;&#x3D; 7.x) 或 yarn:</strong>  Node.js 包管理器。npm 通常会随 Node.js 一起安装，yarn 可以通过 <code>npm install -g yarn</code> 安装。</li><li><strong>Code Editor:</strong>  推荐使用 VS Code，它对 TypeScript 和 NestJS 的支持很好。</li></ul><h2 id="安装-Nest-CLI"><a href="#安装-Nest-CLI" class="headerlink" title="安装 Nest CLI"></a>安装 Nest CLI</h2><p>Nest CLI 是 NestJS 的命令行工具，可以帮助我们快速创建项目、生成模块、组件等。</p><p>打开你的终端（或命令提示符），执行以下命令安装 Nest CLI：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @nestjs/cli</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">yarn global add @nestjs/cli</span><br></pre></td></tr></table></figure><p>安装完成后，可以通过 nest –version 或 nest -v 命令来验证是否安装成功。</p><h2 id="创建-NestJS-项目"><a href="#创建-NestJS-项目" class="headerlink" title="创建 NestJS 项目"></a>创建 NestJS 项目</h2><p>现在，我们可以使用 Nest CLI 创建一个全新的 NestJS 项目。在终端中，切换到你想要创建项目的目录，然后执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nest new my-nestjs-project</span><br></pre></td></tr></table></figure><p>这里 my-nestjs-project 是你的项目名称，你可以根据自己的需要修改。</p><p>执行命令后，Nest CLI 会提示你选择包管理器 (npm 或 yarn)，选择你喜欢的即可。然后，它会自动创建项目并安装依赖。</p><h2 id="项目结构概览"><a href="#项目结构概览" class="headerlink" title="项目结构概览"></a>项目结构概览</h2><p>创建完成后，进入项目目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> my-nestjs-project</span><br></pre></td></tr></table></figure><p>你会看到以下目录结构：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">my-nestjs-project/</span><br><span class="line">├── node_modules/        # 项目依赖包</span><br><span class="line">├── src/                 # 源代码目录</span><br><span class="line">│   ├── app.controller.spec.ts # app 控制器单元测试</span><br><span class="line">│   ├── app.controller.ts  # app 控制器</span><br><span class="line">│   ├── app.module.ts      # app 模块</span><br><span class="line">│   ├── app.service.ts     # app 服务</span><br><span class="line">│   ├── main.ts            # 项目入口文件</span><br><span class="line">│   └── ...</span><br><span class="line">├── test/                # 测试目录</span><br><span class="line">│   └── ...</span><br><span class="line">├── nest-cli.json        # Nest CLI 配置文件</span><br><span class="line">├── package.json         # 项目依赖和脚本</span><br><span class="line">├── tsconfig.json        # TypeScript 配置文件</span><br><span class="line">├── yarn.lock            # yarn 锁文件 (如果使用 yarn)</span><br><span class="line">└── ...</span><br></pre></td></tr></table></figure><pre><code>src/ 目录: 这是你编写所有代码的地方。    main.ts: 程序的入口文件，负责启动 NestJS 应用。    app.module.ts: 根模块，用于组织和管理应用程序的组件。    app.controller.ts: 一个简单的控制器，用于处理 HTTP 请求。    app.service.ts: 一个简单的服务，用于处理业务逻辑。test/ 目录: 用于存放测试文件。nest-cli.json: Nest CLI 的配置文件，用于定义项目构建和代码生成规则。package.json: npm 或 yarn 的配置文件，定义了项目依赖和脚本。tsconfig.json: TypeScript 的配置文件，定义了 TypeScript 的编译规则。</code></pre><h2 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h2><p>现在，我们可以运行项目，看看效果。在终端中，执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm run start:dev</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">yarn start:dev</span><br></pre></td></tr></table></figure><p>这个命令会启动开发服务器，并在 <a href="http://localhost:3000/">http://localhost:3000</a> 上运行你的应用。打开浏览器，访问这个地址，你会看到 Hello World! 的字样。</p><h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><p>在继续深入之前，我们先了解几个 NestJS 的基础概念：</p><pre><code>模块 (Module): 模块是 NestJS 应用的基本组织单元，用于封装和管理相关的控制器、服务和依赖。控制器 (Controller): 控制器负责接收客户端的请求，并将请求路由到对应的处理程序。服务 (Service): 服务负责处理应用程序的业务逻辑，通常与数据访问、业务规则等相关。依赖注入 (Dependency Injection): NestJS 使用依赖注入模式来管理组件之间的依赖关系，提高代码的可测试性和可维护性。装饰器 (Decorator): NestJS 大量使用了装饰器来标记类、方法和属性，用于实现依赖注入、路由映射等功能。</code></pre><h2 id="深入-src-x2F-目录"><a href="#深入-src-x2F-目录" class="headerlink" title="深入 src&#x2F; 目录"></a>深入 src&#x2F; 目录</h2><p>让我们打开 src&#x2F; 目录下的几个文件，看看它们的内容：</p><p>main.ts:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NestFactory</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.module&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">bootstrap</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> app = <span class="keyword">await</span> <span class="title class_">NestFactory</span>.<span class="title function_">create</span>(<span class="title class_">AppModule</span>);</span><br><span class="line">  <span class="keyword">await</span> app.<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">bootstrap</span>();</span><br></pre></td></tr></table></figure><p>这段代码是应用程序的入口，它使用 NestFactory.create() 创建了一个 NestJS 应用实例，并启动了监听 3000 端口的服务器。</p><p>app.module.ts:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Module</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppController</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.controller&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.service&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [],</span><br><span class="line">  <span class="attr">controllers</span>: [<span class="title class_">AppController</span>],</span><br><span class="line">  <span class="attr">providers</span>: [<span class="title class_">AppService</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>@Module() 装饰器定义了一个模块，imports 数组用于引入其他模块，controllers 数组用于定义控制器，providers 数组用于定义服务。</p><p>app.controller.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Controller</span>, <span class="title class_">Get</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.service&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppController</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> appService: AppService</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Get</span>()</span><br><span class="line">  <span class="title function_">getHello</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">appService</span>.<span class="title function_">getHello</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Controller() 装饰器定义了一个控制器，@Get() 装饰器定义了一个处理 GET 请求的路由。</p><p>app.service.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppService</span> &#123;</span><br><span class="line">  <span class="title function_">getHello</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Injectable() 装饰器定义了一个服务，这个服务提供了一个简单的 getHello() 方法</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在本篇文章中，我们完成了 NestJS 的环境搭建，创建了一个简单的项目，运行了开发服务器，并了解了 NestJS 的一些基础概念。在下一篇文章中，我们将深入学习模块、控制器和服务，并尝试构建更复杂的功能。</p><p><strong>说明:</strong></p><ul><li><strong>详细步骤:</strong>  文档包含了详细的步骤，从环境准备到项目运行。</li><li><strong>代码示例:</strong>  提供了关键的代码示例，方便理解。</li><li><strong>概念解释:</strong>  对 NestJS 的核心概念进行了简单解释。</li><li><strong>项目结构:</strong>  对项目结构进行了详细的说明。</li><li><strong>可读性:</strong>  使用了 Markdown 语法，使文档具有良好的可读性。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NestJs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从0到1学习NestJs(完结)</title>
      <link href="/2024/12/29/%E4%BB%8E0%E5%88%B01%E5%AD%A6%E4%B9%A0NestJs(%E4%BA%94)/"/>
      <url>/2024/12/29/%E4%BB%8E0%E5%88%B01%E5%AD%A6%E4%B9%A0NestJs(%E4%BA%94)/</url>
      
        <content type="html"><![CDATA[<h1 id="从-0-到-1-学习-NestJS-五-身份验证与授权-Passport-js-JWT"><a href="#从-0-到-1-学习-NestJS-五-身份验证与授权-Passport-js-JWT" class="headerlink" title="从 0 到 1 学习 NestJS (五) - 身份验证与授权 (Passport.js + JWT)"></a>从 0 到 1 学习 NestJS (五) - 身份验证与授权 (Passport.js + JWT)</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在前面的文章中，我们学习了 NestJS 的核心概念、数据库集成以及如何使用 TypeORM。本篇将深入探讨如何在 NestJS 应用中实现身份验证和授权，我们将使用 Passport.js 作为身份验证中间件，并使用 JWT (JSON Web Tokens) 来管理用户会话。</p><h2 id="1-安装必要的依赖"><a href="#1-安装必要的依赖" class="headerlink" title="1. 安装必要的依赖"></a>1. 安装必要的依赖</h2><p>首先，我们需要安装 Passport.js、JWT 和相关依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install @nestjs/passport passport passport-jwt jsonwebtoken bcrypt @types/passport-jwt</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">yarn add @nestjs/passport passport passport-jwt jsonwebtoken bcrypt @types/passport-jwt</span><br></pre></td></tr></table></figure><pre><code>@nestjs/passport: NestJS 官方提供的 Passport.js 集成模块。passport: Passport.js 本身。passport-jwt: Passport.js 的 JWT 策略。jsonwebtoken: 用于生成和验证 JWT 的库。bcrypt: 用于密码哈希。@types/passport-jwt: Passport-JWT 的 TypeScript 类型定义。</code></pre><h2 id="创建身份验证模块"><a href="#创建身份验证模块" class="headerlink" title="创建身份验证模块"></a>创建身份验证模块</h2><h3 id="创建-auth-模块"><a href="#创建-auth-模块" class="headerlink" title="创建 auth 模块"></a>创建 auth 模块</h3><p>使用 Nest CLI 创建一个新的模块：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nest g module auth</span><br></pre></td></tr></table></figure><h3 id="创建-auth-service-ts"><a href="#创建-auth-service-ts" class="headerlink" title="创建 auth.service.ts"></a>创建 auth.service.ts</h3><p>在 src&#x2F;auth 目录下创建一个 auth.service.ts 文件，并添加以下内容：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/auth/auth.service.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span>, <span class="title class_">UnauthorizedException</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">JwtService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/jwt&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">UsersService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../users/users.service&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> bcrypt <span class="keyword">from</span> <span class="string">&#x27;bcrypt&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AuthService</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> usersService: UsersService,</span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> jwtService: JwtService,</span></span><br><span class="line"><span class="params">  </span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">validateUser</span>(<span class="attr">username</span>: <span class="built_in">string</span>, <span class="attr">pass</span>: <span class="built_in">string</span>): <span class="title class_">Promise</span>&lt;<span class="built_in">any</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> user = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">usersService</span>.<span class="title function_">findOneByUsername</span>(username);</span><br><span class="line">    <span class="keyword">if</span> (user &amp;&amp; <span class="keyword">await</span> bcrypt.<span class="title function_">compare</span>(pass, user.<span class="property">password</span>)) &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; password, ...result &#125; = user;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">login</span>(<span class="params">user: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> payload = &#123; <span class="attr">username</span>: user.<span class="property">username</span>, <span class="attr">sub</span>: user.<span class="property">id</span> &#125;;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">access_token</span>: <span class="variable language_">this</span>.<span class="property">jwtService</span>.<span class="title function_">sign</span>(payload),</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>validateUser(): 验证用户名和密码，成功返回用户信息。login(): 生成 JWT。</code></pre><h3 id="创建-jwt-strategy-ts"><a href="#创建-jwt-strategy-ts" class="headerlink" title="创建 jwt.strategy.ts"></a>创建 jwt.strategy.ts</h3><p>在 src&#x2F;auth 目录下创建一个 jwt.strategy.ts 文件，并添加以下内容：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/auth/jwt.strategy.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">PassportStrategy</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/passport&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ExtractJwt</span>, <span class="title class_">Strategy</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;passport-jwt&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">JwtStrategy</span> <span class="keyword">extends</span> <span class="title class_ inherited__">PassportStrategy</span>(<span class="title class_">Strategy</span>) &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(&#123;</span><br><span class="line">      <span class="attr">jwtFromRequest</span>: <span class="title class_">ExtractJwt</span>.<span class="title function_">fromAuthHeaderAsBearerToken</span>(),</span><br><span class="line">      <span class="attr">ignoreExpiration</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">secretOrKey</span>: <span class="string">&#x27;your_secret_key&#x27;</span>, <span class="comment">// 替换为你的密钥</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">validate</span>(<span class="params">payload: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">userId</span>: payload.<span class="property">sub</span>, <span class="attr">username</span>: payload.<span class="property">username</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>JwtStrategy: 定义 JWT 验证策略。secretOrKey: 用于验证 JWT 的密钥，请替换为更安全的密钥。validate(): 验证 JWT 并返回用户信息。</code></pre><h3 id="创建-auth-module-ts"><a href="#创建-auth-module-ts" class="headerlink" title="创建 auth.module.ts"></a>创建 auth.module.ts</h3><p>在 src&#x2F;auth 目录下创建一个 auth.module.ts 文件，并添加以下内容：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/auth/auth.module.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Module</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AuthService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./auth.service&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">UsersModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../users/users.module&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">PassportModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/passport&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">JwtModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/jwt&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">JwtStrategy</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./jwt.strategy&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [</span><br><span class="line">    <span class="title class_">UsersModule</span>,</span><br><span class="line">    <span class="title class_">PassportModule</span>,</span><br><span class="line">    <span class="title class_">JwtModule</span>.<span class="title function_">register</span>(&#123;</span><br><span class="line">      <span class="attr">secret</span>: <span class="string">&#x27;your_secret_key&#x27;</span>, <span class="comment">// 替换为你的密钥</span></span><br><span class="line">      <span class="attr">signOptions</span>: &#123; <span class="attr">expiresIn</span>: <span class="string">&#x27;60s&#x27;</span> &#125;, <span class="comment">// 设置过期时间</span></span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">providers</span>: [<span class="title class_">AuthService</span>, <span class="title class_">JwtStrategy</span>],</span><br><span class="line">  <span class="attr">exports</span>: [<span class="title class_">AuthService</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AuthModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure><pre><code>JwtModule.register(): 配置 JWT 模块，包括密钥和过期时间。providers: 注册 AuthService 和 JwtStrategy。exports: 导出 AuthService，以便其他模块可以使用。</code></pre><h2 id="在-UsersModule-中添加用户注册和登录"><a href="#在-UsersModule-中添加用户注册和登录" class="headerlink" title="在 UsersModule 中添加用户注册和登录"></a>在 UsersModule 中添加用户注册和登录</h2><h3 id="修改-users-service-ts"><a href="#修改-users-service-ts" class="headerlink" title="修改 users.service.ts"></a>修改 users.service.ts</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/users/users.service.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">InjectRepository</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/typeorm&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Repository</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;typeorm&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">User</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./user.entity&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> bcrypt <span class="keyword">from</span> <span class="string">&#x27;bcrypt&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UsersService</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    <span class="meta">@InjectRepository</span>(User)</span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> usersRepository: Repository&lt;User&gt;,</span></span><br><span class="line"><span class="params">  </span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">create</span>(<span class="attr">user</span>: <span class="title class_">Partial</span>&lt;<span class="title class_">User</span>&gt;): <span class="title class_">Promise</span>&lt;<span class="title class_">User</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> hashedPassword = <span class="keyword">await</span> bcrypt.<span class="title function_">hash</span>(user.<span class="property">password</span>, <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">const</span> newUser = <span class="variable language_">this</span>.<span class="property">usersRepository</span>.<span class="title function_">create</span>(&#123;...user, <span class="attr">password</span>: hashedPassword&#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">usersRepository</span>.<span class="title function_">save</span>(newUser);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">findOneByUsername</span>(<span class="attr">username</span>: <span class="built_in">string</span>): <span class="title class_">Promise</span>&lt;<span class="title class_">User</span> | <span class="literal">undefined</span>&gt; &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">usersRepository</span>.<span class="title function_">findOne</span>(&#123; <span class="attr">where</span>: &#123; username &#125; &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>添加 findOneByUsername() 方法用于查找用户。使用 bcrypt 对密码进行哈希。</code></pre><h3 id="修改-users-controller-ts"><a href="#修改-users-controller-ts" class="headerlink" title="修改 users.controller.ts"></a>修改 users.controller.ts</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/users/users.controller.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Controller</span>, <span class="title class_">Post</span>, <span class="title class_">Body</span>, <span class="title class_">UseGuards</span>, <span class="title class_">Get</span>, <span class="title class_">Request</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">UsersService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./users.service&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">CreateUserDto</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./dto/create-user.dto&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AuthService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../auth/auth.service&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">JwtAuthGuard</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../auth/jwt-auth.guard&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">&#x27;users&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UsersController</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> <span class="keyword">readonly</span> usersService: UsersService,</span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> authService: AuthService</span></span><br><span class="line"><span class="params">  </span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Post</span>(<span class="string">&#x27;register&#x27;</span>)</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">register</span>(<span class="params"><span class="meta">@Body</span>() createUserDto: CreateUserDto</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">usersService</span>.<span class="title function_">create</span>(createUserDto);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Post</span>(<span class="string">&#x27;login&#x27;</span>)</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">login</span>(<span class="params"><span class="meta">@Body</span>() user: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">authService</span>.<span class="title function_">login</span>(user);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@UseGuards</span>(<span class="title class_">JwtAuthGuard</span>)</span><br><span class="line">  <span class="meta">@Get</span>(<span class="string">&#x27;profile&#x27;</span>)</span><br><span class="line">  <span class="title function_">getProfile</span>(<span class="params"><span class="meta">@Request</span>() req</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> req.<span class="property">user</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>添加 register 路由用于用户注册。添加 login 路由用于用户登录。添加 profile 路由，使用 JwtAuthGuard 保护，需要 JWT 验证。</code></pre><h3 id="创建-jwt-auth-guard-ts"><a href="#创建-jwt-auth-guard-ts" class="headerlink" title="创建 jwt-auth.guard.ts"></a>创建 jwt-auth.guard.ts</h3><p>在 src&#x2F;auth 目录下创建一个 jwt-auth.guard.ts 文件，并添加以下内容：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/auth/jwt-auth.guard.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span>, <span class="title class_">ExecutionContext</span>, <span class="title class_">UnauthorizedException</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AuthGuard</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/passport&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">JwtAuthGuard</span> <span class="keyword">extends</span> <span class="title class_ inherited__">AuthGuard</span>(<span class="string">&#x27;jwt&#x27;</span>) &#123;</span><br><span class="line">  <span class="title function_">canActivate</span>(<span class="params">context: ExecutionContext</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">super</span>.<span class="title function_">canActivate</span>(context);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">handleRequest</span>(<span class="params">err, user, info</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (err || !user) &#123;</span><br><span class="line">      <span class="keyword">throw</span> err || <span class="keyword">new</span> <span class="title class_">UnauthorizedException</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-测试"><a href="#4-测试" class="headerlink" title="4. 测试"></a>4. 测试</h2><p>现在，你可以运行 <code>npm run start:dev</code> 或 <code>yarn start:dev</code>，然后使用 Postman 或其他工具测试 API：</p><ol><li><p><strong>POST <code>/users/register</code>:</strong> 注册一个新用户，请求体为：<code>&#123;&quot;username&quot;: &quot;testuser&quot;, &quot;password&quot;: &quot;testpassword&quot;, &quot;email&quot;: &quot;test@example.com&quot;&#125;</code>。如果注册成功，你应该会收到一个包含新用户信息的响应。</p></li><li><p><strong>POST <code>/users/login</code>:</strong> 使用注册的用户名和密码登录，请求体为：<code>&#123;&quot;username&quot;: &quot;testuser&quot;, &quot;password&quot;: &quot;testpassword&quot;&#125;</code>。如果登录成功，你应该会收到一个包含 <code>access_token</code> 的 JSON 响应。</p></li><li><p><strong>GET <code>/users/profile</code>:</strong> 使用上一步获取的 <code>access_token</code> 发起请求。在 Postman 中，将 <code>Authorization</code> 请求头设置为 <code>Bearer &lt;access_token&gt;</code>（将 <code>&lt;access_token&gt;</code> 替换为实际的 token）。如果验证成功，你应该会收到包含用户信息的响应。</p></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在本篇文章中，我们学习了如何在 NestJS 应用中实现身份验证和授权，使用 Passport.js 和 JWT。我们了解了如何创建 Passport 策略、生成和验证 JWT，以及如何使用 Guard 来保护路由。</p><p>通过本篇的学习，你已经掌握了在 NestJS 中实现基本的身份验证和授权的方法，可以为你的应用添加安全机制。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NestJs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从0到1学习NestJs(四)</title>
      <link href="/2024/12/29/%E4%BB%8E0%E5%88%B01%E5%AD%A6%E4%B9%A0NestJs(%E5%9B%9B)/"/>
      <url>/2024/12/29/%E4%BB%8E0%E5%88%B01%E5%AD%A6%E4%B9%A0NestJs(%E5%9B%9B)/</url>
      
        <content type="html"><![CDATA[<h1 id="从-0-到-1-学习-NestJS-四-数据库集成-TypeORM-PostgreSQL"><a href="#从-0-到-1-学习-NestJS-四-数据库集成-TypeORM-PostgreSQL" class="headerlink" title="从 0 到 1 学习 NestJS (四) - 数据库集成 (TypeORM + PostgreSQL)"></a>从 0 到 1 学习 NestJS (四) - 数据库集成 (TypeORM + PostgreSQL)</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在前面的文章中，我们学习了 NestJS 的核心概念，包括模块、控制器、服务、请求处理、响应处理、DTO 和验证。本篇将深入探讨如何在 NestJS 应用中集成数据库，我们将使用 TypeORM 作为 ORM (Object-Relational Mapping) 工具，并以 PostgreSQL 作为数据库示例。</p><h2 id="1-安装必要的依赖"><a href="#1-安装必要的依赖" class="headerlink" title="1. 安装必要的依赖"></a>1. 安装必要的依赖</h2><p>首先，我们需要安装 TypeORM 和 PostgreSQL 的相关依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install @nestjs/typeorm typeorm pg</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">yarn add @nestjs/typeorm typeorm pg</span><br></pre></td></tr></table></figure><pre><code>@nestjs/typeorm: NestJS 官方提供的 TypeORM 集成模块。typeorm: TypeORM 本身。pg: PostgreSQL 数据库驱动。</code></pre><h2 id="配置-TypeORM"><a href="#配置-TypeORM" class="headerlink" title="配置 TypeORM"></a>配置 TypeORM</h2><h3 id="创建-ormconfig-js-文件"><a href="#创建-ormconfig-js-文件" class="headerlink" title="创建 ormconfig.js 文件"></a>创建 ormconfig.js 文件</h3><p>在项目根目录下创建一个名为 ormconfig.js 的文件，并添加以下配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;postgres&#x27;</span>,</span><br><span class="line">  <span class="attr">host</span>: <span class="string">&#x27;localhost&#x27;</span>, <span class="comment">// 数据库主机地址</span></span><br><span class="line">  <span class="attr">port</span>: <span class="number">5432</span>,        <span class="comment">// 数据库端口</span></span><br><span class="line">  <span class="attr">username</span>: <span class="string">&#x27;your_username&#x27;</span>, <span class="comment">// 数据库用户名</span></span><br><span class="line">  <span class="attr">password</span>: <span class="string">&#x27;your_password&#x27;</span>, <span class="comment">// 数据库密码</span></span><br><span class="line">  <span class="attr">database</span>: <span class="string">&#x27;your_database&#x27;</span>, <span class="comment">// 数据库名称</span></span><br><span class="line">  <span class="attr">entities</span>: [<span class="string">&#x27;dist/**/*.entity.js&#x27;</span>], <span class="comment">// 实体文件路径</span></span><br><span class="line">  <span class="attr">synchronize</span>: <span class="literal">true</span>,  <span class="comment">// 自动同步数据库结构 (开发环境建议开启)</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>请将 your_username, your_password 和 your_database 替换成你实际的 PostgreSQL 数据库信息。</p><p>注意: synchronize: true 会在每次应用启动时自动同步数据库结构，在生产环境中不建议开启，应该使用数据库迁移。</p><h3 id="配置-TypeOrmModule"><a href="#配置-TypeOrmModule" class="headerlink" title="配置 TypeOrmModule"></a>配置 TypeOrmModule</h3><p>在 app.module.ts 中，引入并配置 TypeOrmModule：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/app.module.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Module</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">TypeOrmModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/typeorm&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppController</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.controller&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.service&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">UsersModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./users/users.module&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [</span><br><span class="line">    <span class="title class_">TypeOrmModule</span>.<span class="title function_">forRoot</span>(), <span class="comment">// 使用默认配置加载 ormconfig.js</span></span><br><span class="line">    <span class="title class_">UsersModule</span>,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">controllers</span>: [<span class="title class_">AppController</span>],</span><br><span class="line">  <span class="attr">providers</span>: [<span class="title class_">AppService</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>TypeOrmModule.forRoot() 会读取 ormconfig.js 文件中的配置信息，并初始化 TypeORM。</p><h2 id="创建实体-Entity"><a href="#创建实体-Entity" class="headerlink" title="创建实体 (Entity)"></a>创建实体 (Entity)</h2><p>实体是 TypeORM 中用于映射数据库表的类。</p><h3 id="创建-user-entity-ts-文件"><a href="#创建-user-entity-ts-文件" class="headerlink" title="创建 user.entity.ts 文件"></a>创建 user.entity.ts 文件</h3><p>在 src&#x2F;users 目录下创建一个 user.entity.ts 文件，并添加以下内容：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/users/user.entity.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Entity</span>, <span class="title class_">PrimaryGeneratedColumn</span>, <span class="title class_">Column</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;typeorm&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span>(<span class="string">&#x27;users&#x27;</span>) <span class="comment">// 指定表名为 &#x27;users&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="meta">@PrimaryGeneratedColumn</span>() <span class="comment">// 主键，自动生成</span></span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Column</span>() <span class="comment">// 普通列</span></span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Column</span>()</span><br><span class="line">  <span class="attr">email</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>@Entity(&#39;users&#39;): 将 User 类映射到名为 users 的数据库表。@PrimaryGeneratedColumn(): 定义 id 列为主键，并且自动生成。@Column(): 定义 name 和 email 列为普通列。</code></pre><h3 id="将实体添加到模块"><a href="#将实体添加到模块" class="headerlink" title="将实体添加到模块"></a>将实体添加到模块</h3><p>在 users.module.ts 中，引入并配置 TypeOrmModule.forFeature():</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/users/users.module.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Module</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">TypeOrmModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/typeorm&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">UsersController</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./users.controller&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">UsersService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./users.service&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">User</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./user.entity&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [<span class="title class_">TypeOrmModule</span>.<span class="title function_">forFeature</span>([<span class="title class_">User</span>])], <span class="comment">// 注册 User 实体</span></span><br><span class="line">  <span class="attr">controllers</span>: [<span class="title class_">UsersController</span>],</span><br><span class="line">  <span class="attr">providers</span>: [<span class="title class_">UsersService</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UsersModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>TypeOrmModule.forFeature([User]) 会将 User 实体注册到当前模块中。</p><h2 id="在服务中使用-TypeORM"><a href="#在服务中使用-TypeORM" class="headerlink" title="在服务中使用 TypeORM"></a>在服务中使用 TypeORM</h2><h3 id="注入-Repository"><a href="#注入-Repository" class="headerlink" title="注入 Repository"></a>注入 Repository</h3><p>在 users.service.ts 中，注入 Repository：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/users/users.service.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">InjectRepository</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/typeorm&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Repository</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;typeorm&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">User</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./user.entity&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UsersService</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    <span class="meta">@InjectRepository</span>(User) <span class="comment">// 注入 User 实体对应的 Repository</span></span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> usersRepository: Repository&lt;User&gt;,</span></span><br><span class="line"><span class="params">  </span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">findAll</span>(): <span class="title class_">Promise</span>&lt;<span class="title class_">User</span>[]&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">usersRepository</span>.<span class="title function_">find</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">create</span>(<span class="attr">user</span>: <span class="title class_">Partial</span>&lt;<span class="title class_">User</span>&gt;): <span class="title class_">Promise</span>&lt;<span class="title class_">User</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> newUser = <span class="variable language_">this</span>.<span class="property">usersRepository</span>.<span class="title function_">create</span>(user);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">usersRepository</span>.<span class="title function_">save</span>(newUser);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>@InjectRepository(User): 注入 User 实体对应的 Repository。this.usersRepository.find(): 查询所有用户。this.usersRepository.create(user): 创建一个新的用户实体。this.usersRepository.save(newUser): 将新用户保存到数据库。</code></pre><h3 id="修改控制器"><a href="#修改控制器" class="headerlink" title="修改控制器"></a>修改控制器</h3><p>修改 users.controller.ts，使用服务中的方法：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/users/users.controller.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Controller</span>, <span class="title class_">Get</span>, <span class="title class_">Post</span>, <span class="title class_">Body</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">UsersService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./users.service&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">CreateUserDto</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./dto/create-user.dto&#x27;</span>; <span class="comment">// 假设你创建了一个 DTO</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">&#x27;users&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UsersController</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> usersService: UsersService</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Get</span>()</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">findAll</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">usersService</span>.<span class="title function_">findAll</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Post</span>()</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">create</span>(<span class="params"><span class="meta">@Body</span>() createUserDto: CreateUserDto</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">usersService</span>.<span class="title function_">create</span>(createUserDto);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>现在，你可以运行 npm run start:dev 或 yarn start:dev，然后使用 Postman 或其他工具测试 API：</p><pre><code>GET /users: 获取所有用户。POST /users: 创建一个新的用户（请求体格式：&#123;&quot;name&quot;: &quot;John Doe&quot;, &quot;email&quot;: &quot;john.doe@example.com&quot;&#125;）。</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在本篇文章中，我们学习了如何在 NestJS 应用中集成数据库，使用 TypeORM 和 PostgreSQL。我们了解了如何配置 TypeORM、创建实体、使用 Repository 进行数据库操作。现在，你可以使用 NestJS 构建具有数据持久化的应用程序了。</p><p>在下一篇文章中，我们将学习如何使用 NestJS 进行身份验证和授权。</p><p><strong>说明:</strong></p><ul><li><strong>详细步骤:</strong>  文档包含了安装依赖、配置 TypeORM、创建实体、使用 Repository 以及测试 API 的详细步骤。</li><li><strong>代码示例:</strong>  提供了大量的代码示例，方便理解。</li><li><strong>概念解释:</strong>  对 TypeORM 和 Entity 进行了详细的解释。</li><li><strong>实践操作:</strong>  提供了完整的实例，可以实际操作并验证。</li><li><strong>结构清晰:</strong>  使用了 Markdown 语法，结构清晰，易于阅读。</li><li><strong>实用性强:</strong>  文章内容实用，可以帮助你构建具有数据持久化的 NestJS 应用。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NestJs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通用权限管理数据库设计</title>
      <link href="/2024/12/29/%E9%80%9A%E7%94%A8%E6%9D%83%E9%99%90%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/"/>
      <url>/2024/12/29/%E9%80%9A%E7%94%A8%E6%9D%83%E9%99%90%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="增强版-RBAC-权限管理数据库设计"><a href="#增强版-RBAC-权限管理数据库设计" class="headerlink" title="增强版 RBAC 权限管理数据库设计"></a>增强版 RBAC 权限管理数据库设计</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>本设计方案基于 RBAC (Role-Based Access Control) 模式，旨在构建一个灵活、可扩展、易维护的权限管理系统。该方案不仅包含基本的角色、权限和资源管理，还增强了数据权限控制、字典管理和操作日志功能，以满足更复杂的业务需求。</p><h2 id="数据库表结构"><a href="#数据库表结构" class="headerlink" title="数据库表结构"></a>数据库表结构</h2><h3 id="用户表-sys-user"><a href="#用户表-sys-user" class="headerlink" title="用户表 (sys_user)"></a>用户表 (<code>sys_user</code>)</h3><table><thead><tr><th>字段名</th><th>数据类型</th><th>是否为空</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td><code>id</code></td><td>BIGINT</td><td>否</td><td>自增长</td><td>用户ID，主键</td></tr><tr><td><code>username</code></td><td>VARCHAR(255)</td><td>否</td><td></td><td>用户名，唯一索引</td></tr><tr><td><code>password</code></td><td>VARCHAR(255)</td><td>否</td><td></td><td>密码</td></tr><tr><td><code>real_name</code></td><td>VARCHAR(255)</td><td>是</td><td></td><td>真实姓名</td></tr><tr><td><code>email</code></td><td>VARCHAR(255)</td><td>是</td><td></td><td>邮箱</td></tr><tr><td><code>phone</code></td><td>VARCHAR(20)</td><td>是</td><td></td><td>电话</td></tr><tr><td><code>avatar</code></td><td>VARCHAR(255)</td><td>是</td><td></td><td>头像 URL</td></tr><tr><td><code>status</code></td><td>INT</td><td>否</td><td>1 (启用)</td><td>用户状态 (1: 启用, 0: 禁用)</td></tr><tr><td><code>create_time</code></td><td>DATETIME</td><td>否</td><td>当前时间</td><td>创建时间</td></tr><tr><td><code>update_time</code></td><td>DATETIME</td><td>否</td><td>当前时间</td><td>更新时间</td></tr></tbody></table><h3 id="角色表-sys-role"><a href="#角色表-sys-role" class="headerlink" title="角色表 (sys_role)"></a>角色表 (<code>sys_role</code>)</h3><table><thead><tr><th>字段名</th><th>数据类型</th><th>是否为空</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td><code>id</code></td><td>BIGINT</td><td>否</td><td>自增长</td><td>角色ID，主键</td></tr><tr><td><code>role_name</code></td><td>VARCHAR(255)</td><td>否</td><td></td><td>角色名称，唯一索引</td></tr><tr><td><code>role_code</code></td><td>VARCHAR(255)</td><td>否</td><td></td><td>角色编码，唯一索引</td></tr><tr><td><code>description</code></td><td>TEXT</td><td>是</td><td></td><td>角色描述</td></tr><tr><td><code>data_scope</code></td><td>VARCHAR(255)</td><td>是</td><td>‘all’</td><td>数据范围 (all, self, dept, custom)</td></tr><tr><td><code>status</code></td><td>INT</td><td>否</td><td>1 (启用)</td><td>角色状态 (1: 启用, 0: 禁用)</td></tr><tr><td><code>create_time</code></td><td>DATETIME</td><td>否</td><td>当前时间</td><td>创建时间</td></tr><tr><td><code>update_time</code></td><td>DATETIME</td><td>否</td><td>当前时间</td><td>更新时间</td></tr></tbody></table><h3 id="部门表-sys-dept"><a href="#部门表-sys-dept" class="headerlink" title="部门表 (sys_dept)"></a>部门表 (<code>sys_dept</code>)</h3><table><thead><tr><th>字段名</th><th>数据类型</th><th>是否为空</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td><code>id</code></td><td>BIGINT</td><td>否</td><td>自增长</td><td>部门ID，主键</td></tr><tr><td><code>dept_name</code></td><td>VARCHAR(255)</td><td>否</td><td></td><td>部门名称</td></tr><tr><td><code>parent_id</code></td><td>BIGINT</td><td>是</td><td>0</td><td>父部门ID</td></tr><tr><td><code>dept_code</code></td><td>VARCHAR(255)</td><td>是</td><td></td><td>部门编码，唯一索引</td></tr><tr><td><code>description</code></td><td>TEXT</td><td>是</td><td></td><td>部门描述</td></tr><tr><td><code>status</code></td><td>INT</td><td>否</td><td>1 (启用)</td><td>部门状态 (1: 启用, 0: 禁用)</td></tr><tr><td><code>create_time</code></td><td>DATETIME</td><td>否</td><td>当前时间</td><td>创建时间</td></tr><tr><td><code>update_time</code></td><td>DATETIME</td><td>否</td><td>当前时间</td><td>更新时间</td></tr></tbody></table><h3 id="菜单表-sys-menu"><a href="#菜单表-sys-menu" class="headerlink" title="菜单表 (sys_menu)"></a>菜单表 (<code>sys_menu</code>)</h3><table><thead><tr><th>字段名</th><th>数据类型</th><th>是否为空</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td><code>id</code></td><td>BIGINT</td><td>否</td><td>自增长</td><td>菜单ID，主键</td></tr><tr><td><code>menu_name</code></td><td>VARCHAR(255)</td><td>否</td><td></td><td>菜单名称</td></tr><tr><td><code>menu_code</code></td><td>VARCHAR(255)</td><td>否</td><td></td><td>菜单编码，唯一索引</td></tr><tr><td><code>parent_id</code></td><td>BIGINT</td><td>是</td><td>0</td><td>父菜单ID</td></tr><tr><td><code>path</code></td><td>VARCHAR(255)</td><td>是</td><td></td><td>菜单路径</td></tr><tr><td><code>icon</code></td><td>VARCHAR(255)</td><td>是</td><td></td><td>菜单图标</td></tr><tr><td><code>component</code></td><td>VARCHAR(255)</td><td>是</td><td></td><td>前端组件路径</td></tr><tr><td><code>sort</code></td><td>INT</td><td>是</td><td>0</td><td>排序</td></tr><tr><td><code>type</code></td><td>VARCHAR(255)</td><td>是</td><td>‘menu’</td><td>菜单类型 (menu, button, link)</td></tr><tr><td><code>status</code></td><td>INT</td><td>否</td><td>1 (启用)</td><td>菜单状态 (1: 启用, 0: 禁用)</td></tr><tr><td><code>create_time</code></td><td>DATETIME</td><td>否</td><td>当前时间</td><td>创建时间</td></tr><tr><td><code>update_time</code></td><td>DATETIME</td><td>否</td><td>当前时间</td><td>更新时间</td></tr></tbody></table><h3 id="权限表-sys-permission"><a href="#权限表-sys-permission" class="headerlink" title="权限表 (sys_permission)"></a>权限表 (<code>sys_permission</code>)</h3><table><thead><tr><th>字段名</th><th>数据类型</th><th>是否为空</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td><code>id</code></td><td>BIGINT</td><td>否</td><td>自增长</td><td>权限ID，主键</td></tr><tr><td><code>permission_name</code></td><td>VARCHAR(255)</td><td>否</td><td></td><td>权限名称</td></tr><tr><td><code>permission_code</code></td><td>VARCHAR(255)</td><td>否</td><td></td><td>权限编码，唯一索引</td></tr><tr><td><code>description</code></td><td>TEXT</td><td>是</td><td></td><td>权限描述</td></tr><tr><td><code>create_time</code></td><td>DATETIME</td><td>否</td><td>当前时间</td><td>创建时间</td></tr><tr><td><code>update_time</code></td><td>DATETIME</td><td>否</td><td>当前时间</td><td>更新时间</td></tr></tbody></table><h3 id="资源表-sys-resource"><a href="#资源表-sys-resource" class="headerlink" title="资源表 (sys_resource)"></a>资源表 (<code>sys_resource</code>)</h3><table><thead><tr><th>字段名</th><th>数据类型</th><th>是否为空</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td><code>id</code></td><td>BIGINT</td><td>否</td><td>自增长</td><td>资源ID，主键</td></tr><tr><td><code>resource_name</code></td><td>VARCHAR(255)</td><td>否</td><td></td><td>资源名称</td></tr><tr><td><code>resource_path</code></td><td>VARCHAR(255)</td><td>否</td><td></td><td>资源路径</td></tr><tr><td><code>resource_type</code></td><td>VARCHAR(255)</td><td>否</td><td></td><td>资源类型 (例如：文件、API)</td></tr><tr><td><code>description</code></td><td>TEXT</td><td>是</td><td></td><td>资源描述</td></tr><tr><td><code>create_time</code></td><td>DATETIME</td><td>否</td><td>当前时间</td><td>创建时间</td></tr><tr><td><code>update_time</code></td><td>DATETIME</td><td>否</td><td>当前时间</td><td>更新时间</td></tr></tbody></table><h3 id="字典表-sys-dict"><a href="#字典表-sys-dict" class="headerlink" title="字典表 (sys_dict)"></a>字典表 (<code>sys_dict</code>)</h3><table><thead><tr><th>字段名</th><th>数据类型</th><th>是否为空</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td><code>id</code></td><td>BIGINT</td><td>否</td><td>自增长</td><td>字典ID，主键</td></tr><tr><td><code>dict_name</code></td><td>VARCHAR(255)</td><td>否</td><td></td><td>字典名称</td></tr><tr><td><code>dict_code</code></td><td>VARCHAR(255)</td><td>否</td><td></td><td>字典编码，唯一索引</td></tr><tr><td><code>description</code></td><td>TEXT</td><td>是</td><td></td><td>字典描述</td></tr><tr><td><code>create_time</code></td><td>DATETIME</td><td>否</td><td>当前时间</td><td>创建时间</td></tr><tr><td><code>update_time</code></td><td>DATETIME</td><td>否</td><td>当前时间</td><td>更新时间</td></tr></tbody></table><h3 id="字典项表-sys-dict-item"><a href="#字典项表-sys-dict-item" class="headerlink" title="字典项表 (sys_dict_item)"></a>字典项表 (<code>sys_dict_item</code>)</h3><table><thead><tr><th>字段名</th><th>数据类型</th><th>是否为空</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td><code>id</code></td><td>BIGINT</td><td>否</td><td>自增长</td><td>字典项ID，主键</td></tr><tr><td><code>dict_id</code></td><td>BIGINT</td><td>否</td><td></td><td>所属字典ID，外键关联 <code>sys_dict</code> 表</td></tr><tr><td><code>item_name</code></td><td>VARCHAR(255)</td><td>否</td><td></td><td>字典项名称，例如 “启用”</td></tr><tr><td><code>item_value</code></td><td>VARCHAR(255)</td><td>否</td><td></td><td>字典项值，例如 “1”</td></tr><tr><td><code>sort</code></td><td>INT</td><td>是</td><td>0</td><td>排序</td></tr><tr><td><code>description</code></td><td>TEXT</td><td>是</td><td></td><td>字典项描述</td></tr><tr><td><code>status</code></td><td>INT</td><td>否</td><td>1 (启用)</td><td>字典项状态 (1: 启用, 0: 禁用)</td></tr><tr><td><code>create_time</code></td><td>DATETIME</td><td>否</td><td>当前时间</td><td>创建时间</td></tr><tr><td><code>update_time</code></td><td>DATETIME</td><td>否</td><td>当前时间</td><td>更新时间</td></tr></tbody></table><h3 id="用户角色关系表-sys-user-role"><a href="#用户角色关系表-sys-user-role" class="headerlink" title="用户角色关系表 (sys_user_role)"></a>用户角色关系表 (<code>sys_user_role</code>)</h3><table><thead><tr><th>字段名</th><th>数据类型</th><th>是否为空</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td><code>user_id</code></td><td>BIGINT</td><td>否</td><td></td><td>用户ID，外键关联 <code>sys_user</code> 表</td></tr><tr><td><code>role_id</code></td><td>BIGINT</td><td>否</td><td></td><td>角色ID，外键关联 <code>sys_role</code> 表</td></tr><tr><td><code>create_time</code></td><td>DATETIME</td><td>否</td><td>当前时间</td><td>创建时间</td></tr></tbody></table><h3 id="用户部门关系表-sys-user-dept"><a href="#用户部门关系表-sys-user-dept" class="headerlink" title="用户部门关系表 (sys_user_dept)"></a>用户部门关系表 (<code>sys_user_dept</code>)</h3><table><thead><tr><th>字段名</th><th>数据类型</th><th>是否为空</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td><code>user_id</code></td><td>BIGINT</td><td>否</td><td></td><td>用户ID，外键关联 <code>sys_user</code> 表</td></tr><tr><td><code>dept_id</code></td><td>BIGINT</td><td>否</td><td></td><td>部门ID，外键关联 <code>sys_dept</code> 表</td></tr><tr><td><code>create_time</code></td><td>DATETIME</td><td>否</td><td>当前时间</td><td>创建时间</td></tr></tbody></table><h3 id="权限资源关系表-sys-permission-resource"><a href="#权限资源关系表-sys-permission-resource" class="headerlink" title="权限资源关系表 (sys_permission_resource)"></a>权限资源关系表 (<code>sys_permission_resource</code>)</h3><table><thead><tr><th>字段名</th><th>数据类型</th><th>是否为空</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td><code>permission_id</code></td><td>BIGINT</td><td>否</td><td></td><td>权限ID，外键关联 <code>sys_permission</code> 表</td></tr><tr><td><code>resource_id</code></td><td>BIGINT</td><td>否</td><td></td><td>资源ID，外键关联 <code>sys_resource</code> 表</td></tr><tr><td><code>create_time</code></td><td>DATETIME</td><td>否</td><td>当前时间</td><td>创建时间</td></tr></tbody></table><h3 id="角色权限关系表-sys-role-permission"><a href="#角色权限关系表-sys-role-permission" class="headerlink" title="角色权限关系表 (sys_role_permission)"></a>角色权限关系表 (<code>sys_role_permission</code>)</h3><table><thead><tr><th>字段名</th><th>数据类型</th><th>是否为空</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td><code>role_id</code></td><td>BIGINT</td><td>否</td><td></td><td>角色ID，外键关联 <code>sys_role</code> 表</td></tr><tr><td><code>permission_id</code></td><td>BIGINT</td><td>否</td><td></td><td>权限ID，外键关联 <code>sys_permission</code> 表</td></tr><tr><td><code>create_time</code></td><td>DATETIME</td><td>否</td><td>当前时间</td><td>创建时间</td></tr></tbody></table><h3 id="角色菜单关系表-sys-role-menu"><a href="#角色菜单关系表-sys-role-menu" class="headerlink" title="角色菜单关系表 (sys_role_menu)"></a>角色菜单关系表 (<code>sys_role_menu</code>)</h3><table><thead><tr><th>字段名</th><th>数据类型</th><th>是否为空</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td><code>role_id</code></td><td>BIGINT</td><td>否</td><td></td><td>角色ID，外键关联 <code>sys_role</code> 表</td></tr><tr><td><code>menu_id</code></td><td>BIGINT</td><td>否</td><td></td><td>菜单ID，外键关联 <code>sys_menu</code> 表</td></tr><tr><td><code>create_time</code></td><td>DATETIME</td><td>否</td><td>当前时间</td><td>创建时间</td></tr></tbody></table><h3 id="角色数据权限范围表-sys-role-data-scope"><a href="#角色数据权限范围表-sys-role-data-scope" class="headerlink" title="角色数据权限范围表 (sys_role_data_scope)"></a>角色数据权限范围表 (<code>sys_role_data_scope</code>)</h3><table><thead><tr><th>字段名</th><th>数据类型</th><th>是否为空</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td><code>id</code></td><td>BIGINT</td><td>否</td><td>自增长</td><td>主键</td></tr><tr><td><code>role_id</code></td><td>BIGINT</td><td>否</td><td></td><td>角色ID，外键关联 <code>sys_role</code> 表</td></tr><tr><td><code>dept_id</code></td><td>BIGINT</td><td>是</td><td></td><td>部门ID，外键关联 <code>sys_dept</code> 表，当角色数据范围为 <code>dept</code> 时使用</td></tr><tr><td><code>custom_scope</code></td><td>TEXT</td><td>是</td><td></td><td>自定义数据范围，存储 JSON 格式数据，当角色数据范围为 <code>custom</code> 时使用</td></tr><tr><td><code>create_time</code></td><td>DATETIME</td><td>否</td><td>当前时间</td><td>创建时间</td></tr></tbody></table><h3 id="操作日志表-sys-operation-log"><a href="#操作日志表-sys-operation-log" class="headerlink" title="操作日志表 (sys_operation_log)"></a>操作日志表 (<code>sys_operation_log</code>)</h3><table><thead><tr><th>字段名</th><th>数据类型</th><th>是否为空</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td><code>id</code></td><td>BIGINT</td><td>否</td><td>自增长</td><td>日志ID，主键</td></tr><tr><td><code>user_id</code></td><td>BIGINT</td><td>否</td><td></td><td>操作用户ID，外键关联 <code>sys_user</code> 表</td></tr><tr><td><code>operation_type</code></td><td>VARCHAR(255)</td><td>否</td><td></td><td>操作类型 (例如：create, update, delete)</td></tr><tr><td><code>operation_module</code></td><td>VARCHAR(255)</td><td>否</td><td></td><td>操作模块 (例如：user, role, menu)</td></tr><tr><td><code>operation_desc</code></td><td>TEXT</td><td>是</td><td></td><td>操作描述</td></tr><tr><td><code>request_url</code></td><td>VARCHAR(255)</td><td>是</td><td></td><td>请求 URL</td></tr><tr><td><code>request_method</code></td><td>VARCHAR(255)</td><td>是</td><td></td><td>请求方法</td></tr><tr><td><code>request_params</code></td><td>TEXT</td><td>是</td><td></td><td>请求参数</td></tr><tr><td><code>response_data</code></td><td>TEXT</td><td>是</td><td></td><td>响应数据</td></tr><tr><td><code>ip_address</code></td><td>VARCHAR(255)</td><td>是</td><td></td><td>IP 地址</td></tr><tr><td><code>create_time</code></td><td>DATETIME</td><td>否</td><td>当前时间</td><td>创建时间</td></tr></tbody></table><h2 id="表关系图-简述"><a href="#表关系图-简述" class="headerlink" title="表关系图 (简述)"></a>表关系图 (简述)</h2><ul><li><strong>用户与角色：</strong> <code>sys_user</code> 表和 <code>sys_role</code> 表之间通过 <code>sys_user_role</code> 表形成多对多关系。一个用户可以拥有多个角色，一个角色可以被多个用户拥有。</li><li><strong>用户与部门：</strong> <code>sys_user</code> 表和 <code>sys_dept</code> 表之间通过 <code>sys_user_dept</code> 表形成多对多关系。一个用户可以属于多个部门，一个部门可以有多个用户。</li><li><strong>角色与权限：</strong> <code>sys_role</code> 表和 <code>sys_permission</code> 表之间通过 <code>sys_role_permission</code> 表形成多对多关系。一个角色可以拥有多个权限，一个权限可以被多个角色拥有。</li><li><strong>权限与资源：</strong> <code>sys_permission</code> 表和 <code>sys_resource</code> 表之间通过 <code>sys_permission_resource</code> 表形成多对多关系。一个权限可以访问多个资源，一个资源可以被多个权限访问。</li><li><strong>角色与菜单：</strong> <code>sys_role</code> 表和 <code>sys_menu</code> 表之间通过 <code>sys_role_menu</code> 表形成多对多关系。一个角色可以访问多个菜单，一个菜单可以被多个角色访问。</li><li><strong>字典与字典项：</strong> <code>sys_dict</code> 表和 <code>sys_dict_item</code> 表之间是一对多关系。一个字典可以包含多个字典项。</li><li><strong>角色与数据范围：</strong> <code>sys_role</code> 表和 <code>sys_role_data_scope</code> 表之间是一对一或一对多的关系（取决于 <code>data_scope</code> 的值）。用于存储角色对应的数据权限范围，包括部门或自定义范围。</li><li><strong>操作日志与用户：</strong> <code>sys_operation_log</code> 表通过 <code>user_id</code> 字段外键关联到 <code>sys_user</code> 表，记录用户的操作行为。</li></ul><h2 id="关键概念说明"><a href="#关键概念说明" class="headerlink" title="关键概念说明"></a>关键概念说明</h2><ul><li><strong>数据范围 (<code>data_scope</code>):</strong>  <code>sys_role</code> 表中的 <code>data_scope</code> 字段定义了角色所能访问的数据范围。<ul><li><code>all</code>: 可以访问所有数据。</li><li><code>self</code>: 只能访问自己的数据。</li><li><code>dept</code>: 只能访问自己所在部门的数据，具体部门在 <code>sys_role_data_scope</code> 表中关联。</li><li><code>custom</code>: 可以访问自定义的数据范围，具体范围在 <code>sys_role_data_scope</code> 表中以 JSON 格式存储。</li></ul></li><li><strong>权限编码 (<code>permission_code</code>):</strong>  <code>sys_permission</code> 表中的 <code>permission_code</code> 字段用于程序中进行权限校验。</li><li><strong>菜单编码 (<code>menu_code</code>):</strong> <code>sys_menu</code> 表中的 <code>menu_code</code> 字段用于前端路由和权限控制。</li><li><strong>字典编码 (<code>dict_code</code>):</strong> <code>sys_dict</code> 表中的 <code>dict_code</code> 字段用于在代码中获取对应的字典项。</li><li><strong>资源路径 (<code>resource_path</code>):</strong> <code>sys_resource</code> 表中的 <code>resource_path</code> 字段用于 API 接口或静态资源的权限控制。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本数据库设计方案旨在提供一个全面、灵活的权限管理系统，涵盖了用户、角色、部门、菜单、权限、资源、字典等多个方面。通过合理的表结构和关系设计，可以满足复杂业务场景下的权限管理需求，并方便后续的扩展和维护。同时，数据范围控制、字典管理和操作日志的加入，使得系统更加完善和健壮。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法汇总</title>
      <link href="/2024/12/21/Markdown%E8%AF%AD%E6%B3%95%E6%B1%87%E6%80%BB/"/>
      <url>/2024/12/21/Markdown%E8%AF%AD%E6%B3%95%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<center>  <img src="https://img.shields.io/badge/Markdown-CheatSheet-blue?style=for-the-badge&logo=markdown" alt="Markdown CheatSheet Badge"/></center><h2 id="🚀-Markdown-简介"><a href="#🚀-Markdown-简介" class="headerlink" title="🚀 Markdown 简介"></a>🚀 Markdown 简介</h2><p>Markdown 是一种轻量级标记语言，它允许你使用易读易写的纯文本格式编写文档，然后转换成 HTML 等格式。Markdown 广泛应用于博客、文档、笔记等领域，因其简洁高效而备受欢迎。</p><h2 id="📝-基础语法"><a href="#📝-基础语法" class="headerlink" title="📝 基础语法"></a>📝 基础语法</h2><h3 id="1-标题"><a href="#1-标题" class="headerlink" title="1. 标题"></a>1. 标题</h3><p>使用 <code>#</code> 符号表示标题，<code>#</code> 的数量表示标题的级别。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 一级标题</span></span><br><span class="line"><span class="section">## 二级标题</span></span><br><span class="line"><span class="section">### 三级标题</span></span><br><span class="line"><span class="section">#### 四级标题</span></span><br><span class="line"><span class="section">##### 五级标题</span></span><br><span class="line"><span class="section">###### 六级标题</span></span><br></pre></td></tr></table></figure><h3 id="2-段落"><a href="#2-段落" class="headerlink" title="2. 段落"></a>2. 段落</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">段落之间使用空行分隔。</span><br><span class="line"></span><br><span class="line">这是一个段落。</span><br><span class="line"></span><br><span class="line">这是另一个段落。</span><br></pre></td></tr></table></figure><h3 id="3-换行"><a href="#3-换行" class="headerlink" title="3. 换行"></a>3. 换行</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在行末尾添加两个或多个空格，然后按回车键即可换行。</span><br><span class="line"></span><br><span class="line">这是一行文本，  </span><br><span class="line">这是下一行文本。</span><br></pre></td></tr></table></figure><h3 id="4-强调"><a href="#4-强调" class="headerlink" title="4. 强调"></a>4. 强调</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">使用 * 或 _ 包裹文本表示强调。</span><br><span class="line"></span><br><span class="line"><span class="emphasis">*斜体文本*</span></span><br><span class="line"><span class="emphasis">_斜体文本_</span></span><br><span class="line"><span class="strong">**粗体文本**</span></span><br><span class="line"><span class="strong">__粗体文本__</span></span><br><span class="line"><span class="strong">**<span class="emphasis">*粗斜体文本*</span>**</span></span><br><span class="line"><span class="strong">__<span class="emphasis">_粗斜体文本_</span>__</span></span><br></pre></td></tr></table></figure><h3 id="5-删除线"><a href="#5-删除线" class="headerlink" title="5. 删除线"></a>5. 删除线</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">使用 ~~ 包裹文本表示删除线。</span><br><span class="line"></span><br><span class="line">~~这是删除线文本~~</span><br></pre></td></tr></table></figure><h3 id="6-引用"><a href="#6-引用" class="headerlink" title="6. 引用"></a>6. 引用</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">使用 &gt; 符号表示引用。</span><br><span class="line"></span><br><span class="line"><span class="quote">&gt; 这是一段引用文本</span></span><br><span class="line"><span class="quote">&gt;</span></span><br><span class="line"><span class="quote">&gt; 这是引用文本的第二行</span></span><br></pre></td></tr></table></figure><h3 id="7-列表"><a href="#7-列表" class="headerlink" title="7. 列表"></a>7. 列表</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">无序列表</span><br><span class="line"></span><br><span class="line">使用 <span class="emphasis">*、+ 或 - 符号表示无序列表。</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">*</span> 项目 1</span><br><span class="line"><span class="bullet">*</span> 项目 2</span><br><span class="line"><span class="bullet">*</span> 项目 3</span><br><span class="line"></span><br><span class="line"><span class="bullet">+</span> 项目 A</span><br><span class="line"><span class="bullet">+</span> 项目 B</span><br><span class="line"><span class="bullet">+</span> 项目 C</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 选项 x</span><br><span class="line"><span class="bullet">-</span> 选项 y</span><br><span class="line"><span class="bullet">-</span> 选项 z</span><br><span class="line"></span><br><span class="line">有序列表</span><br><span class="line"></span><br><span class="line">使用数字和 . 符号表示有序列表。</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 第一项</span><br><span class="line"><span class="bullet">2.</span> 第二项</span><br><span class="line"><span class="bullet">3.</span> 第三项</span><br></pre></td></tr></table></figure><h3 id="8-代码"><a href="#8-代码" class="headerlink" title="8. 代码"></a>8. 代码</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">行内代码</span><br><span class="line"></span><br><span class="line">使用 \`` 包裹代码表示行内代码。</span><br><span class="line"></span><br><span class="line">这是 <span class="code">`行内代码`</span>。</span><br><span class="line"></span><br><span class="line">代码块</span><br><span class="line"></span><br><span class="line">使用 \<span class="code">````` 包裹代码块，可以指定代码语言。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">\`\`\`python</span></span><br><span class="line"><span class="code">print(&quot;Hello, world!&quot;)</span></span><br><span class="line"><span class="code">\`\`\`</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">\`\`\`javascript</span></span><br><span class="line"><span class="code">console.log(&quot;Hello, world!&quot;);</span></span><br><span class="line"><span class="code">\`\`\`</span></span><br></pre></td></tr></table></figure><h3 id="9-分割线"><a href="#9-分割线" class="headerlink" title="9. 分割线"></a>9. 分割线</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">使用 ---、<span class="strong">*** 或 ___ 表示分割线。</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">---</span></span><br><span class="line"><span class="strong">**</span>*</span><br><span class="line"><span class="strong">__<span class="emphasis">_</span></span></span><br></pre></td></tr></table></figure><h2 id="🔗-高级语法"><a href="#🔗-高级语法" class="headerlink" title="🔗 高级语法"></a>🔗 高级语法</h2><h3 id="1-链接"><a href="#1-链接" class="headerlink" title="1. 链接"></a>1. 链接</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">链接文本</span>](<span class="link">链接地址</span>)</span><br><span class="line"></span><br><span class="line">[<span class="string">百度</span>](<span class="link">https://www.baidu.com</span>)</span><br><span class="line"></span><br><span class="line">[<span class="string">带标题的链接</span>](<span class="link">https://www.google.com &quot;谷歌&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="2-图片"><a href="#2-图片" class="headerlink" title="2. 图片"></a>2. 图片</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">图片描述</span>](<span class="link">图片链接</span>)</span><br><span class="line"></span><br><span class="line">![<span class="string">示例图片</span>](<span class="link">https://via.placeholder.com/150</span>)</span><br></pre></td></tr></table></figure><h3 id="3-表格"><a href="#3-表格" class="headerlink" title="3. 表格"></a>3. 表格</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">| 列1 | 列2 | 列3 |</span><br><span class="line">| --- | --- | --- |</span><br><span class="line">| 数据1 | 数据2 | 数据3 |</span><br><span class="line">| 数据A | 数据B | 数据C |</span><br><span class="line"></span><br><span class="line">表格对齐</span><br><span class="line"></span><br><span class="line">| 左对齐 | 居中对齐 | 右对齐 |</span><br><span class="line">| :---- | :----: | ----: |</span><br><span class="line">| 左 | 中 | 右 |</span><br><span class="line">| 左 | 中 | 右 |</span><br></pre></td></tr></table></figure><h3 id="4-任务列表"><a href="#4-任务列表" class="headerlink" title="4. 任务列表"></a>4. 任务列表</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> [x] 已完成任务</span><br><span class="line"><span class="bullet">-</span> [ ] 未完成任务</span><br></pre></td></tr></table></figure><h3 id="5-脚注"><a href="#5-脚注" class="headerlink" title="5. 脚注"></a>5. 脚注</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这是一个带有脚注的句子[^1]。</span><br><span class="line"></span><br><span class="line">[<span class="symbol">^1</span>]: <span class="link">这是脚注的内容。</span></span><br></pre></td></tr></table></figure><h3 id="6-Emoji-表情"><a href="#6-Emoji-表情" class="headerlink" title="6. Emoji 表情"></a>6. Emoji 表情</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">可以使用 Unicode 编码或者简短的名称来插入表情。</span><br><span class="line"></span><br><span class="line">😄 🎉 🚀 👍</span><br><span class="line">:smile: :tada: :rocket: :thumbsup:</span><br></pre></td></tr></table></figure><h3 id="7-HTML-标签"><a href="#7-HTML-标签" class="headerlink" title="7. HTML 标签"></a>7. HTML 标签</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">可以在 Markdown 中使用 HTML 标签。</span><br><span class="line"></span><br><span class="line">&lt;span style=&quot;color:red&quot;&gt;这是红色文本&lt;/span&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;center&gt;居中内容&lt;/center&gt;</span><br></pre></td></tr></table></figure><h2 id="💡-扩展语法"><a href="#💡-扩展语法" class="headerlink" title="💡 扩展语法"></a>💡 扩展语法</h2><p>一些 Markdown 解析器支持额外的语法，例如：</p><pre><code>TOC (Table of Contents): 自动生成目录。数学公式: 使用 LaTeX 语法编写数学公式。流程图、时序图等: 使用 Mermaid 等工具绘制图表。</code></pre><h2 id="🛠️-工具推荐"><a href="#🛠️-工具推荐" class="headerlink" title="🛠️ 工具推荐"></a>🛠️ 工具推荐</h2><pre><code>Typora: 一款简洁强大的 Markdown 编辑器。VS Code: 使用 Markdown 插件的强大代码编辑器。Online Markdown Editor: 在线 Markdown 编辑器，方便快捷。</code></pre><h2 id="📚-学习资源"><a href="#📚-学习资源" class="headerlink" title="📚 学习资源"></a>📚 学习资源</h2><pre><code>Markdown 官方教程Markdown 教程</code></pre>]]></content>
      
      
      <categories>
          
          <category> MarkDown语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MarkDown语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工作问题记录</title>
      <link href="/2024/12/21/%E5%B7%A5%E4%BD%9C%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
      <url>/2024/12/21/%E5%B7%A5%E4%BD%9C%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="Net8-SqlServer的坑"><a href="#Net8-SqlServer的坑" class="headerlink" title=".Net8 + SqlServer的坑"></a>.Net8 + SqlServer的坑</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述:"></a>问题描述:</h2><p>SSL出错，已成功与服务器建立连接，但是在登录过程中发生错误。 (provider: SSL 提供程序, error: 0 - 证书链是由不受信任的颁发机构颁发的)</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案:"></a>解决方案:</h2><p>数据库连接串增加:Encrypt&#x3D;True;TrustServerCertificate&#x3D;True;</p><h1 id="Navicat连接MySql报错"><a href="#Navicat连接MySql报错" class="headerlink" title="Navicat连接MySql报错"></a>Navicat连接MySql报错</h1><h2 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述:"></a>问题描述:</h2><p>在用Navicat连接非本地的Mysql服务器数据库，报1130错误</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR <span class="number">1130</span>: Host <span class="number">192.168</span><span class="number">.3</span><span class="number">.100</span> <span class="keyword">is</span> <span class="keyword">not</span> allowed <span class="keyword">to</span> <span class="keyword">connect</span> <span class="keyword">to</span> this MySQL server</span><br></pre></td></tr></table></figure><h2 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析:"></a>原因分析:</h2><p>无法给远程连接的用户权限问题</p><h2 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案:"></a>解决方案:</h2><p>在本机登入mysql后，更改 “mysql” 数据库里的 “user” 表里的 “host” 项，从”localhost”改称’%’。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql <span class="operator">-</span>u root <span class="operator">-</span>p <span class="comment">--以权限用户root登录</span></span><br><span class="line">use mysql; <span class="comment">--选择mysql库</span></span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;host&#x27;</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">user</span><span class="operator">=</span><span class="string">&#x27;root&#x27;</span>; <span class="comment">--查看mysql库中的user表的host值（即可进行连接访问的主机/IP名称）</span></span><br><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> host <span class="operator">=</span> <span class="string">&#x27;%&#x27;</span> <span class="keyword">where</span> <span class="keyword">user</span> <span class="operator">=</span><span class="string">&#x27;root&#x27;</span>; <span class="comment">--修改host值（以通配符%的内容增加主机/IP地址），当然也可以直接增加IP地址</span></span><br><span class="line">flush privileges;<span class="comment">--刷新MySQL的系统权限相关表</span></span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;host&#x27;</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">user</span><span class="operator">=</span><span class="string">&#x27;root&#x27;</span>; <span class="comment">--再重新查看user表时，有修改</span></span><br></pre></td></tr></table></figure><h1 id="DBeaver连接MySql报错"><a href="#DBeaver连接MySql报错" class="headerlink" title="DBeaver连接MySql报错"></a>DBeaver连接MySql报错</h1><h2 id="问题描述-2"><a href="#问题描述-2" class="headerlink" title="问题描述:"></a>问题描述:</h2><p>在用DBeaver连接mysql时，报错：Public Key Retrieval is not allowed</p><h2 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案:"></a>解决方案:</h2><p>在新建连接的时候，驱动属性里设置 allowPublicKeyRetrieval 的值为 true</p>]]></content>
      
      
      <categories>
          
          <category> 工作问题记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作问题记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义实体类封装</title>
      <link href="/2024/12/21/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AE%9E%E4%BD%93%E7%B1%BB%E5%B0%81%E8%A3%85/"/>
      <url>/2024/12/21/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AE%9E%E4%BD%93%E7%B1%BB%E5%B0%81%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h2 id="实体基类接口"><a href="#实体基类接口" class="headerlink" title="实体基类接口"></a>实体基类接口</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 实体基类接口</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IEntity</span>&lt;<span class="title">TKey</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 主键Id</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    TKey Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建基类接口"><a href="#创建基类接口" class="headerlink" title="创建基类接口"></a>创建基类接口</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 创建基类接口</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ICreatedAudit</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 创建人</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="built_in">long</span>? CreatedUserId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 创建时间</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    DateTime? CreatedDate &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编辑基类接口"><a href="#编辑基类接口" class="headerlink" title="编辑基类接口"></a>编辑基类接口</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 更新基类接口</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IUpdatedAudit</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 更新人</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="built_in">long</span>? UpdatedUserId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 更新时间</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    DateTime? UpdatedDate &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除基类接口"><a href="#删除基类接口" class="headerlink" title="删除基类接口"></a>删除基类接口</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 删除基类接口</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IDeletedAudit</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 删除人</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="built_in">long</span>? DeletedUserId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 删除时间</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    DateTime? DeletedDate &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 是否删除 0-否  1-是</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="built_in">bool</span>? IsDeleted &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="排序基类接口-可选"><a href="#排序基类接口-可选" class="headerlink" title="排序基类接口(可选)"></a>排序基类接口(可选)</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 排序基类接口</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ISortAudit</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 排序字段 数字越小越靠前</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span>? Seq &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="租户基类接口-可选"><a href="#租户基类接口-可选" class="headerlink" title="租户基类接口(可选)"></a>租户基类接口(可选)</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 租户基类接口</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ITenantAudit</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 租户Id</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="built_in">long</span>? TenantId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="公共实体基类"><a href="#公共实体基类" class="headerlink" title="公共实体基类"></a>公共实体基类</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 实体基类</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BaseEntity</span>&lt;<span class="title">TKey</span>&gt; : <span class="title">IEntity</span>&lt;<span class="title">TKey</span>&gt;, <span class="title">ICreatedAudit</span>, <span class="title">IUpdatedAudit</span>, <span class="title">IDeletedAudit</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 主键</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">virtual</span> TKey Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 备注</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span>? Description &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 创建人</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">long</span>? CreatedUserId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 创建时间</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> DateTime? CreatedDate &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 修改人</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">long</span>? UpdatedUserId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 修改时间</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> DateTime? UpdatedDate &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 删除人</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">long</span>? DeletedUserId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 删除时间</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> DateTime? DeletedDate &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 是否删除</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span>? IsDeleted &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Entity封装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Entity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EFCore入门 实战教程</title>
      <link href="/2024/12/21/EFCore%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
      <url>/2024/12/21/EFCore%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="EFCore入门-实战教程"><a href="#EFCore入门-实战教程" class="headerlink" title="EFCore入门 实战教程"></a>EFCore入门 实战教程</h1><p>Entity Framework Core (EF Core) 是一个轻量级、可扩展且跨平台的 ORM（对象关系映射）框架，用于 .NET 应用程序中进行数据访问。本文将带您从零开始，通过实际操作步骤和 VS2022 截图，深入了解 EF Core 的各种用法，包括模型创建、数据查询、数据修改、迁移、高级查询等。</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>在开始之前，请确保您已安装以下软件：</p><ul><li><strong>Visual Studio 2022</strong>：建议安装最新版本，并确保已安装 .NET 开发工具。</li><li><strong>.NET SDK</strong>：确保已安装 .NET 6 或更高版本。</li><li><strong>数据库</strong>：本文将使用 SQL Server 作为示例，您也可以使用其他数据库，如 MySQL、PostgreSQL 等。</li></ul><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><ol><li><p><strong>打开 Visual Studio 2022</strong>，点击“创建新项目”。</p><p><img src="https://i.imgur.com/A0lH00J.png" alt="创建新项目"></p></li><li><p>选择 “<strong>控制台应用程序</strong>”，点击“下一步”。</p><p><img src="https://i.imgur.com/1k9O70n.png" alt="选择控制台应用程序"></p></li><li><p>输入项目名称（例如“EFCoreDemo”），并选择项目位置，点击“下一步”。</p><p><img src="https://i.imgur.com/9p7Q07Y.png" alt="配置新项目"></p></li><li><p>选择 “.NET 6.0” 或更高版本，点击“创建”。</p><p><img src="https://i.imgur.com/78j9b98.png" alt="选择 .NET 版本"></p></li></ol><h2 id="安装-EF-Core-相关-NuGet-包"><a href="#安装-EF-Core-相关-NuGet-包" class="headerlink" title="安装 EF Core 相关 NuGet 包"></a>安装 EF Core 相关 NuGet 包</h2><ol><li><p>在 Visual Studio 2022 中，右键点击项目名称（“EFCoreDemo”），选择 “<strong>管理 NuGet 程序包</strong>”。</p><p><img src="https://i.imgur.com/m2Z91w8.png" alt="管理 NuGet 程序包"></p></li><li><p>在 “浏览” 选项卡中，搜索并安装以下 NuGet 包：</p><ul><li><code>Microsoft.EntityFrameworkCore</code></li><li><code>Microsoft.EntityFrameworkCore.SqlServer</code> (如果您使用 SQL Server)</li><li><code>Microsoft.EntityFrameworkCore.Tools</code></li></ul><p><img src="https://i.imgur.com/j2B3t1P.png" alt="安装 NuGet 包"></p><p>请确保安装的版本与您的 .NET SDK 版本兼容。</p></li></ol><h2 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h2><p>实体类代表数据库中的表。在项目中创建一个新的文件夹 “Models”，并在其中创建以下两个类：</p><ol><li><p><strong><code>Blog.cs</code></strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">EFCoreDemo.Models</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Blog</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Title &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Author &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> List&lt;Post&gt; Posts &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong><code>Post.cs</code></strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">EFCoreDemo.Models</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Post</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Content &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> BlogId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> Blog Blog &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="创建数据库上下文"><a href="#创建数据库上下文" class="headerlink" title="创建数据库上下文"></a>创建数据库上下文</h2><p>数据库上下文是 EF Core 的核心，它代表与数据库的会话。创建一个新的类 <code>AppDbContext.cs</code>：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> EFCoreDemo.Models;</span><br><span class="line"><span class="keyword">using</span> Microsoft.EntityFrameworkCore;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">EFCoreDemo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AppDbContext</span> : <span class="title">DbContext</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">AppDbContext</span>(<span class="params">DbContextOptions&lt;AppDbContext&gt; options</span>) : <span class="title">base</span>(<span class="params">options</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> DbSet&lt;Blog&gt; Blogs &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> DbSet&lt;Post&gt; Posts &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置数据库连接"><a href="#配置数据库连接" class="headerlink" title="配置数据库连接"></a>配置数据库连接</h2><p>在 Program.cs 文件中配置数据库连接：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> EFCoreDemo;</span><br><span class="line"><span class="keyword">using</span> Microsoft.EntityFrameworkCore;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.DependencyInjection;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Hosting;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> builder = Host.CreateDefaultBuilder(args);</span><br><span class="line"></span><br><span class="line">builder.ConfigureServices((hostContext, services) =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    services.AddDbContext&lt;AppDbContext&gt;(options =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        options.UseSqlServer(<span class="string">&quot;Data Source=.;Initial Catalog=EFCoreDemoDB;Integrated Security=True;TrustServerCertificate=True;&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> host = builder.Build();</span><br><span class="line"><span class="comment">// 确保数据库存在</span></span><br><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> scope = host.Services.CreateScope())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> dbContext = scope.ServiceProvider.GetRequiredService&lt;AppDbContext&gt;();</span><br><span class="line">    dbContext.Database.EnsureCreated(); <span class="comment">// 确保数据库已创建</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">host.Run();</span><br></pre></td></tr></table></figure><div class="tip success faa-horizontal animated"><p>注意: 请将 Data Source, Initial Catalog 修改为您实际的 SQL Server 连接字符串。</p></div><h2 id="创建迁移"><a href="#创建迁移" class="headerlink" title="创建迁移"></a>创建迁移</h2><h3 id="迁移允许您将数据库架构与实体类保持同步。"><a href="#迁移允许您将数据库架构与实体类保持同步。" class="headerlink" title="迁移允许您将数据库架构与实体类保持同步。"></a>迁移允许您将数据库架构与实体类保持同步。</h3><p>打开 “程序包管理器控制台” （在 VS2022 中，选择 “视图” -&gt; “其他窗口” -&gt; “程序包管理器控制台”）。<br>打开程序包管理器控制台<br>运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Add-Migration InitialCreate</span><br></pre></td></tr></table></figure><h3 id="这将创建一个新的迁移文件，其中包含创建数据库架构的必要代码。"><a href="#这将创建一个新的迁移文件，其中包含创建数据库架构的必要代码。" class="headerlink" title="这将创建一个新的迁移文件，其中包含创建数据库架构的必要代码。"></a>这将创建一个新的迁移文件，其中包含创建数据库架构的必要代码。</h3><p>运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Update-Database</span><br></pre></td></tr></table></figure><p>这将将迁移应用到数据库，创建表。</p><h2 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h2><p>在 Program.cs 文件中添加以下代码，插入一些示例数据：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> EFCoreDemo;</span><br><span class="line"><span class="keyword">using</span> EFCoreDemo.Models;</span><br><span class="line"><span class="keyword">using</span> Microsoft.EntityFrameworkCore;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.DependencyInjection;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Hosting;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> builder = Host.CreateDefaultBuilder(args);</span><br><span class="line"></span><br><span class="line">builder.ConfigureServices((hostContext, services) =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    services.AddDbContext&lt;AppDbContext&gt;(options =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        options.UseSqlServer(<span class="string">&quot;Data Source=.;Initial Catalog=EFCoreDemoDB;Integrated Security=True;TrustServerCertificate=True;&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> host = builder.Build();</span><br><span class="line"><span class="comment">// 确保数据库存在</span></span><br><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> scope = host.Services.CreateScope())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> dbContext = scope.ServiceProvider.GetRequiredService&lt;AppDbContext&gt;();</span><br><span class="line">    dbContext.Database.EnsureCreated(); <span class="comment">// 确保数据库已创建</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 添加示例数据</span></span><br><span class="line">    <span class="keyword">if</span> (!dbContext.Blogs.Any())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> blog = <span class="keyword">new</span> Blog &#123; Title = <span class="string">&quot;My First Blog&quot;</span>, Author = <span class="string">&quot;John Doe&quot;</span> &#125;;</span><br><span class="line">        <span class="keyword">var</span> post1 = <span class="keyword">new</span> Post &#123; Content = <span class="string">&quot;This is my first post&quot;</span>, Blog = blog &#125;;</span><br><span class="line">        <span class="keyword">var</span> post2 = <span class="keyword">new</span> Post &#123; Content = <span class="string">&quot;This is my second post&quot;</span>, Blog = blog &#125;;</span><br><span class="line">        dbContext.Blogs.Add(blog);</span><br><span class="line">        dbContext.Posts.AddRange(post1, post2);</span><br><span class="line">        dbContext.SaveChanges();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">host.Run();</span><br></pre></td></tr></table></figure><h2 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h2><p>在 Program.cs 中添加以下代码，查询并显示数据：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> EFCoreDemo;</span><br><span class="line"><span class="keyword">using</span> EFCoreDemo.Models;</span><br><span class="line"><span class="keyword">using</span> Microsoft.EntityFrameworkCore;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.DependencyInjection;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Hosting;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> builder = Host.CreateDefaultBuilder(args);</span><br><span class="line"></span><br><span class="line">builder.ConfigureServices((hostContext, services) =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    services.AddDbContext&lt;AppDbContext&gt;(options =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        options.UseSqlServer(<span class="string">&quot;Data Source=.;Initial Catalog=EFCoreDemoDB;Integrated Security=True;TrustServerCertificate=True;&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> host = builder.Build();</span><br><span class="line"><span class="comment">// 确保数据库存在</span></span><br><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> scope = host.Services.CreateScope())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> dbContext = scope.ServiceProvider.GetRequiredService&lt;AppDbContext&gt;();</span><br><span class="line">    dbContext.Database.EnsureCreated(); <span class="comment">// 确保数据库已创建</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 添加示例数据</span></span><br><span class="line">    <span class="keyword">if</span> (!dbContext.Blogs.Any())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> blog = <span class="keyword">new</span> Blog &#123; Title = <span class="string">&quot;My First Blog&quot;</span>, Author = <span class="string">&quot;John Doe&quot;</span> &#125;;</span><br><span class="line">        <span class="keyword">var</span> post1 = <span class="keyword">new</span> Post &#123; Content = <span class="string">&quot;This is my first post&quot;</span>, Blog = blog &#125;;</span><br><span class="line">        <span class="keyword">var</span> post2 = <span class="keyword">new</span> Post &#123; Content = <span class="string">&quot;This is my second post&quot;</span>, Blog = blog &#125;;</span><br><span class="line">        dbContext.Blogs.Add(blog);</span><br><span class="line">        dbContext.Posts.AddRange(post1, post2);</span><br><span class="line">        dbContext.SaveChanges();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 查询数据</span></span><br><span class="line">    <span class="keyword">var</span> blogs = dbContext.Blogs.Include(b =&gt; b.Posts).ToList();</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> blog <span class="keyword">in</span> blogs)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;Blog: <span class="subst">&#123;blog.Title&#125;</span> by <span class="subst">&#123;blog.Author&#125;</span>&quot;</span>);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> post <span class="keyword">in</span> blog.Posts)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;  - Post: <span class="subst">&#123;post.Content&#125;</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">host.Run();</span><br></pre></td></tr></table></figure><p>这段代码使用 Include 方法加载了 Blog 实体及其关联的 Posts 实体，然后遍历并打印了结果。</p><h2 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h2><p>在 Program.cs 中添加以下代码，修改现有数据：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> EFCoreDemo;</span><br><span class="line"><span class="keyword">using</span> EFCoreDemo.Models;</span><br><span class="line"><span class="keyword">using</span> Microsoft.EntityFrameworkCore;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.DependencyInjection;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Hosting;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> builder = Host.CreateDefaultBuilder(args);</span><br><span class="line"></span><br><span class="line">builder.ConfigureServices((hostContext, services) =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    services.AddDbContext&lt;AppDbContext&gt;(options =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        options.UseSqlServer(<span class="string">&quot;Data Source=.;Initial Catalog=EFCoreDemoDB;Integrated Security=True;TrustServerCertificate=True;&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> host = builder.Build();</span><br><span class="line"><span class="comment">// 确保数据库存在</span></span><br><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> scope = host.Services.CreateScope())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> dbContext = scope.ServiceProvider.GetRequiredService&lt;AppDbContext&gt;();</span><br><span class="line">    dbContext.Database.EnsureCreated(); <span class="comment">// 确保数据库已创建</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 添加示例数据</span></span><br><span class="line">    <span class="keyword">if</span> (!dbContext.Blogs.Any())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> blog = <span class="keyword">new</span> Blog &#123; Title = <span class="string">&quot;My First Blog&quot;</span>, Author = <span class="string">&quot;John Doe&quot;</span> &#125;;</span><br><span class="line">        <span class="keyword">var</span> post1 = <span class="keyword">new</span> Post &#123; Content = <span class="string">&quot;This is my first post&quot;</span>, Blog = blog &#125;;</span><br><span class="line">        <span class="keyword">var</span> post2 = <span class="keyword">new</span> Post &#123; Content = <span class="string">&quot;This is my second post&quot;</span>, Blog = blog &#125;;</span><br><span class="line">        dbContext.Blogs.Add(blog);</span><br><span class="line">        dbContext.Posts.AddRange(post1, post2);</span><br><span class="line">        dbContext.SaveChanges();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 查询数据</span></span><br><span class="line">    <span class="keyword">var</span> blogs = dbContext.Blogs.Include(b =&gt; b.Posts).ToList();</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> blog <span class="keyword">in</span> blogs)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;Blog: <span class="subst">&#123;blog.Title&#125;</span> by <span class="subst">&#123;blog.Author&#125;</span>&quot;</span>);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> post <span class="keyword">in</span> blog.Posts)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;  - Post: <span class="subst">&#123;post.Content&#125;</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 修改数据</span></span><br><span class="line">    <span class="keyword">var</span> blogToUpdate = dbContext.Blogs.FirstOrDefault();</span><br><span class="line">    <span class="keyword">if</span> (blogToUpdate != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        blogToUpdate.Title = <span class="string">&quot;My Updated Blog Title&quot;</span>;</span><br><span class="line">        dbContext.SaveChanges();</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Blog updated successfully.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">host.Run();</span><br></pre></td></tr></table></figure><p>这段代码首先查询第一个 Blog 实体，然后更新其 Title 属性，最后调用 SaveChanges 方法将更改保存到数据库。</p><h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><p>在 Program.cs 中添加以下代码，删除数据：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> EFCoreDemo;</span><br><span class="line"><span class="keyword">using</span> EFCoreDemo.Models;</span><br><span class="line"><span class="keyword">using</span> Microsoft.EntityFrameworkCore;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.DependencyInjection;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Hosting;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> builder = Host.CreateDefaultBuilder(args);</span><br><span class="line"></span><br><span class="line">builder.ConfigureServices((hostContext, services) =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    services.AddDbContext&lt;AppDbContext&gt;(options =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        options.UseSqlServer(<span class="string">&quot;Data Source=.;Initial Catalog=EFCoreDemoDB;Integrated Security=True;TrustServerCertificate=True;&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> host = builder.Build();</span><br><span class="line"><span class="comment">// 确保数据库存在</span></span><br><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> scope = host.Services.CreateScope())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> dbContext = scope.ServiceProvider.GetRequiredService&lt;AppDbContext&gt;();</span><br><span class="line">    dbContext.Database.EnsureCreated(); <span class="comment">// 确保数据库已创建</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 添加示例数据</span></span><br><span class="line">    <span class="keyword">if</span> (!dbContext.Blogs.Any())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> blog = <span class="keyword">new</span> Blog &#123; Title = <span class="string">&quot;My First Blog&quot;</span>, Author = <span class="string">&quot;John Doe&quot;</span> &#125;;</span><br><span class="line">        <span class="keyword">var</span> post1 = <span class="keyword">new</span> Post &#123; Content = <span class="string">&quot;This is my first post&quot;</span>, Blog = blog &#125;;</span><br><span class="line">        <span class="keyword">var</span> post2 = <span class="keyword">new</span> Post &#123; Content = <span class="string">&quot;This is my second post&quot;</span>, Blog = blog &#125;;</span><br><span class="line">        dbContext.Blogs.Add(blog);</span><br><span class="line">        dbContext.Posts.AddRange(post1, post2);</span><br><span class="line">        dbContext.SaveChanges();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 查询数据</span></span><br><span class="line">    <span class="keyword">var</span> blogs = dbContext.Blogs.Include(b =&gt; b.Posts).ToList();</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> blog <span class="keyword">in</span> blogs)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;Blog: <span class="subst">&#123;blog.Title&#125;</span> by <span class="subst">&#123;blog.Author&#125;</span>&quot;</span>);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> post <span class="keyword">in</span> blog.Posts)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;  - Post: <span class="subst">&#123;post.Content&#125;</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 修改数据</span></span><br><span class="line">    <span class="keyword">var</span> blogToUpdate = dbContext.Blogs.FirstOrDefault();</span><br><span class="line">    <span class="keyword">if</span> (blogToUpdate != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        blogToUpdate.Title = <span class="string">&quot;My Updated Blog Title&quot;</span>;</span><br><span class="line">        dbContext.SaveChanges();</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Blog updated successfully.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 删除数据</span></span><br><span class="line">    <span class="keyword">var</span> blogToDelete = dbContext.Blogs.FirstOrDefault();</span><br><span class="line">    <span class="keyword">if</span> (blogToDelete != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        dbContext.Blogs.Remove(blogToDelete);</span><br><span class="line">        dbContext.SaveChanges();</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Blog deleted successfully.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">host.Run();</span><br></pre></td></tr></table></figure><p>这段代码首先查询第一个 Blog 实体，然后使用 Remove 方法将其删除，最后调用 SaveChanges 方法将更改保存到数据库。</p><h2 id="高级查询技巧"><a href="#高级查询技巧" class="headerlink" title="高级查询技巧"></a>高级查询技巧</h2><p>EF Core 提供了多种高级查询技巧，例如：</p><pre><code>Where 子句：用于过滤数据。OrderBy 和 OrderByDescending：用于排序数据。Skip 和 Take：用于分页。Select：用于选择特定的列。GroupBy：用于分组。Join：用于连接多个表。</code></pre><p>以下是一个示例，展示如何使用 Where 和 OrderBy：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 高级查询</span></span><br><span class="line"><span class="keyword">var</span> filteredBlogs = dbContext.Blogs</span><br><span class="line">    .Where(b =&gt; b.Author.Contains(<span class="string">&quot;John&quot;</span>))</span><br><span class="line">    .OrderByDescending(b =&gt; b.Title)</span><br><span class="line">    .ToList();</span><br><span class="line"></span><br><span class="line">Console.WriteLine(<span class="string">&quot;\nFiltered and Sorted Blogs:&quot;</span>);</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> blog <span class="keyword">in</span> filteredBlogs)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;  - Blog: <span class="subst">&#123;blog.Title&#125;</span> by <span class="subst">&#123;blog.Author&#125;</span>&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过本文，您已经掌握了 EF Core 的基本用法，包括：</p><pre><code>创建实体类和数据库上下文。配置数据库连接。创建迁移并更新数据库。添加、查询、修改和删除数据。使用高级查询技巧。</code></pre><p>EF Core 是一个功能强大的 ORM 框架，可以帮助您更高效地进行数据访问。建议您继续深入学习 EF Core 的更多功能，例如：</p><pre><code>关系映射：一对一、一对多、多对多关系。配置：使用 Fluent API 或数据注释进行配置。性能优化：使用索引、延迟加载等。事务：处理数据库事务。</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EF Core </tag>
            
            <tag> ORM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1Panel：轻巧易用的服务器面板</title>
      <link href="/2024/12/21/1Panel%E9%9D%A2%E6%9D%BF/"/>
      <url>/2024/12/21/1Panel%E9%9D%A2%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="1Panel：轻巧易用的现代化服务器面板新选择-深入探索与实践"><a href="#1Panel：轻巧易用的现代化服务器面板新选择-深入探索与实践" class="headerlink" title="1Panel：轻巧易用的现代化服务器面板新选择 - 深入探索与实践"></a>1Panel：轻巧易用的现代化服务器面板新选择 - 深入探索与实践</h1><p>在服务器管理的世界里，选择一个合适的面板，能够极大地提高效率并简化复杂的操作。今天，我们要深入探讨一款新兴的、轻量级的开源服务器面板—— <strong>1Panel</strong>。它以其简洁的界面、强大的功能、易用性以及对 Docker 的深度集成，吸引了越来越多的开发者和系统管理员的青睐。</p><p><img src="https://resource.fit2cloud.com/1panel/img/overview.png" alt="1Panel 仪表盘概览"></p><h2 id="1Panel-的独特之处"><a href="#1Panel-的独特之处" class="headerlink" title="1Panel 的独特之处"></a>1Panel 的独特之处</h2><p>与传统的服务器面板不同，1Panel 的设计理念更注重现代化和轻量化。它不仅仅是一个简单的管理工具，更是一个高效的 DevOps 平台。以下是其主要特点：</p><ul><li><strong>现代化 UI 设计:</strong> 1Panel 的界面采用了简洁的卡片式布局，色彩搭配舒适，信息呈现清晰，操作逻辑直观，即使是新手也能快速上手。</li><li><strong>极致轻量:</strong> 1Panel 资源占用极低，即使在低配置的 VPS 或云服务器上也能流畅运行，这对于追求性能和成本效益的用户来说非常重要。</li><li><strong>Docker 原生支持:</strong> 1Panel 深度集成了 Docker 和 Docker Compose，可以一键部署和管理 Docker 容器，这对于现代应用部署来说至关重要。</li><li><strong>强大的应用商店:</strong> 内置丰富的应用商店，可以一键安装各种常用应用，包括 WordPress、Nginx、MySQL、Redis、GitLab 等，大大简化了部署流程。</li><li><strong>多语言支持:</strong> 1Panel 支持多种语言，满足全球不同用户的需求。</li><li><strong>开源免费:</strong> 1Panel 是一个完全开源的项目，可以免费使用，并且可以根据自己的需求进行定制和扩展。</li><li><strong>插件系统:</strong> 1Panel 提供了插件系统，可以方便地扩展其功能，满足更高级的需求。</li></ul><h2 id="1Panel-的核心功能详解"><a href="#1Panel-的核心功能详解" class="headerlink" title="1Panel 的核心功能详解"></a>1Panel 的核心功能详解</h2><p>1Panel 提供了丰富的功能模块，覆盖了服务器管理的各个方面：</p><ul><li><strong>系统监控:</strong> 实时监控服务器的 CPU、内存、磁盘、网络等资源使用情况，并提供详细的图表和数据分析。</li><li><strong>网站管理:</strong> 可以轻松创建和管理多个网站，支持虚拟主机、HTTPS 证书自动申请和续签、反向代理等功能。</li><li><strong>数据库管理:</strong> 支持 MySQL、MariaDB、PostgreSQL 等多种数据库的管理，可以方便地创建、备份、恢复和管理数据库。</li><li><strong>文件管理:</strong> 提供强大的在线文件管理器，支持上传、下载、编辑、压缩、解压等操作，方便管理服务器上的文件。</li><li><strong>Docker 管理:</strong> 可以方便地部署、管理和更新 Docker 容器，支持 Docker Compose，可以一键部署复杂的多容器应用。</li><li><strong>应用商店:</strong> 提供丰富的应用商店，可以一键安装各种常用应用，简化部署流程，节省大量时间。</li><li><strong>安全管理:</strong> 提供防火墙、SSH 管理、安全策略配置等功能，保障服务器的安全。</li><li><strong>备份与恢复:</strong> 提供数据备份和恢复功能，可以定期备份网站、数据库等重要数据，防止数据丢失。</li><li><strong>计划任务:</strong> 可以设置定时任务，例如定期备份数据、清理日志等。</li></ul><p><img src="https://1panel.cn/docs/img/app/appstore.png" alt="1Panel 应用商店"></p><h2 id="安装-1Panel：简单快捷"><a href="#安装-1Panel：简单快捷" class="headerlink" title="安装 1Panel：简单快捷"></a>安装 1Panel：简单快捷</h2><p>1Panel 的安装过程非常简单，官方提供了详细的安装文档。以下是在 Linux 系统上的安装步骤：</p><ol><li><p><strong>确保 Docker 和 Docker Compose 已安装:</strong></p><p>如果你的服务器没有安装 Docker 和 Docker Compose，请先安装它们。你可以参考 Docker 官方文档进行安装。</p></li><li><p><strong>下载安装脚本:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL https://resource.fit2cloud.com/1panel/install.sh -o install.sh</span><br></pre></td></tr></table></figure></li><li><p><strong>运行安装脚本:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash install.sh</span><br></pre></td></tr></table></figure><p>安装脚本会自动检测你的系统环境，下载并安装 1Panel。安装完成后，会提示你访问面板的地址和初始用户名密码。</p></li></ol><p><strong>注意:</strong> 安装过程中请确保你的系统已经安装了必要的依赖，并根据提示进行操作。</p><h2 id="1Panel-的应用场景"><a href="#1Panel-的应用场景" class="headerlink" title="1Panel 的应用场景"></a>1Panel 的应用场景</h2><p>1Panel 的应用场景非常广泛，适合以下用户：</p><ul><li><strong>个人开发者:</strong> 快速部署和管理个人项目，例如个人博客、网站、API 服务等。</li><li><strong>小型团队:</strong> 搭建和管理开发环境、测试环境、生产环境。</li><li><strong>Docker 用户:</strong> 方便地部署和管理 Docker 容器，构建微服务架构。</li><li><strong>教育机构:</strong> 搭建在线学习平台、实验环境。</li><li><strong>内容创作者:</strong> 部署个人博客、网站、在线商店等。</li><li><strong>系统管理员:</strong> 简化服务器管理，提高运维效率。</li></ul><h2 id="实际案例：使用-1Panel-快速部署-WordPress"><a href="#实际案例：使用-1Panel-快速部署-WordPress" class="headerlink" title="实际案例：使用 1Panel 快速部署 WordPress"></a>实际案例：使用 1Panel 快速部署 WordPress</h2><p>为了更好地展示 1Panel 的强大功能，我们以部署 WordPress 为例：</p><ol><li><p><strong>登录 1Panel 面板:</strong><br>使用浏览器访问你的服务器 IP 地址，并使用初始用户名密码登录 1Panel 面板。</p></li><li><p><strong>打开应用商店:</strong><br>在面板的左侧导航栏中，点击 “应用商店”。</p></li><li><p><strong>搜索并安装 WordPress:</strong><br>在应用商店中搜索 “WordPress”，找到 WordPress 应用并点击 “安装”。</p></li><li><p><strong>配置 WordPress:</strong><br>在安装界面，你需要配置 WordPress 的数据库信息、管理员账号等。</p></li><li><p><strong>完成安装:</strong><br>点击 “安装” 按钮，1Panel 会自动下载并安装 WordPress。</p></li><li><p><strong>访问 WordPress:</strong><br>安装完成后，你可以通过浏览器访问你的域名或服务器 IP 地址，即可看到 WordPress 网站。</p></li></ol><p>整个过程非常简单，只需几分钟即可完成 WordPress 的部署。</p><p><img src="https://1panel.cn/docs/img/containers/setting.png" alt="1Panel Docker 管理"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1Panel 是一款功能强大、易于使用的现代化服务器面板。它以其轻量级、Docker 原生支持、丰富的应用商店等特点，为用户提供了更好的服务器管理体验。无论你是个人开发者还是系统管理员，1Panel 都是一个值得尝试的选择。</p><h2 id="更多资源"><a href="#更多资源" class="headerlink" title="更多资源"></a>更多资源</h2><ul><li><strong>1Panel 官网:</strong> <a href="%E5%AE%98%E7%BD%91%E5%9C%B0%E5%9D%80">https://1panel.cn/</a></li><li><strong>1Panel GitHub:</strong> <a href="GitHub">https://github.com/1Panel-dev/1Panel/</a></li><li><strong>1Panel 文档:</strong> <a href="%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3">https://1panel.cn/docs/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 服务器面板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1Panel </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cursor中免费体验 Gemini-2.0-Flash-Exp：详细教程</title>
      <link href="/2024/12/21/Cursor%E4%B8%AD%E5%85%8D%E8%B4%B9%E4%BD%93%E9%AA%8C%20Gemini-2.0-Flash-Exp/"/>
      <url>/2024/12/21/Cursor%E4%B8%AD%E5%85%8D%E8%B4%B9%E4%BD%93%E9%AA%8C%20Gemini-2.0-Flash-Exp/</url>
      
        <content type="html"><![CDATA[<h1 id="在-Cursor-中免费体验-Gemini-2-0-Flash-Exp：详细教程"><a href="#在-Cursor-中免费体验-Gemini-2-0-Flash-Exp：详细教程" class="headerlink" title="在 Cursor 中免费体验 Gemini-2.0-Flash-Exp：详细教程"></a>在 Cursor 中免费体验 Gemini-2.0-Flash-Exp：详细教程</h1><p>Cursor 是一款基于 AI 的代码编辑器，它集成了多种强大的 AI 模型，可以帮助开发者提高编码效率。其中，Gemini-2.0-Flash-Exp 是 Google 最新推出的 Gemini 模型的一个实验版本，具有更快的响应速度和更高的准确性。本文将详细介绍如何在 Cursor 中免费使用 Gemini-2.0-Flash-Exp 模型，让你体验 AI 编码的强大魅力。我们将从安装配置到高级用法、性能优化、实战示例和最佳实践，深入探讨如何利用这个工具提高你的开发效率。</p><h2 id="1-什么是-Gemini-2-0-Flash-Exp？"><a href="#1-什么是-Gemini-2-0-Flash-Exp？" class="headerlink" title="1. 什么是 Gemini-2.0-Flash-Exp？"></a>1. 什么是 Gemini-2.0-Flash-Exp？</h2><p>Gemini-2.0-Flash-Exp 是 Google 最新推出的 Gemini 模型的一个实验版本，它专注于提供更快的响应速度，同时保持较高的代码生成和理解能力。与之前的模型相比，Gemini-2.0-Flash-Exp 在处理代码补全、代码生成、代码解释、代码重构等任务时更加高效，并且在处理较长代码片段时表现更佳。它的“Flash”特性意味着它在响应速度上进行了优化，让你在编码过程中几乎感觉不到延迟。它不仅能理解多种编程语言，还能处理复杂的代码逻辑和上下文，并能根据你的代码风格进行调整。</p><h2 id="2-为什么选择-Cursor？"><a href="#2-为什么选择-Cursor？" class="headerlink" title="2. 为什么选择 Cursor？"></a>2. 为什么选择 Cursor？</h2><p>Cursor 作为一款 AI 驱动的代码编辑器，具有诸多优点，使其成为使用 Gemini-2.0-Flash-Exp 的理想选择：</p><ul><li><strong>无缝集成 AI：</strong> Cursor 将 AI 功能无缝集成到编辑器中，让你在编码过程中随时可以使用 AI 辅助，无需切换工具，极大提高编码效率。</li><li><strong>多种 AI 模型支持：</strong> 除了 Gemini-2.0-Flash-Exp，Cursor 还支持其他 AI 模型，方便你根据需要选择，灵活应对不同场景，满足不同任务的需求。</li><li><strong>免费使用：</strong> 部分模型（包括 Gemini-2.0-Flash-Exp）可以免费使用，降低了使用 AI 的门槛，让更多开发者体验 AI 的便利，享受 AI 带来的高效开发体验。</li><li><strong>强大的代码补全：</strong> 提供智能的代码补全、参数提示和错误检测，减少编码错误，提高代码质量，让代码更加健壮和可靠。</li><li><strong>代码解释：</strong> 可以解释代码的功能、逻辑和潜在问题，帮助你更好地理解代码，节省理解代码的时间，提高代码阅读效率。</li><li><strong>代码重构：</strong> 可以帮助你进行代码重构和优化，提高代码质量和可维护性，让代码更易于维护和扩展，降低维护成本。</li><li><strong>易于使用：</strong> 界面简洁，操作方便，即使是新手也能快速上手，降低学习成本，让开发者专注于代码编写。</li><li><strong>跨平台支持：</strong> 支持 Windows、macOS 和 Linux 等多种操作系统，满足不同开发者的需求，让开发者在任何平台上都能高效工作。</li><li><strong>强大的搜索功能：</strong> 支持全文搜索和符号搜索，快速定位代码，提高开发效率，节省查找代码的时间。</li><li><strong>版本控制集成：</strong> 集成了 Git 等版本控制系统，方便你管理代码版本，协同开发。</li></ul><h2 id="3-安装-Cursor"><a href="#3-安装-Cursor" class="headerlink" title="3. 安装 Cursor"></a>3. 安装 Cursor</h2><p>首先，你需要下载并安装 Cursor 代码编辑器。你可以从 Cursor 的官方网站下载：<a href="https://cursor.sh/">https://cursor.sh/</a>。安装过程非常简单，按照提示操作即可。安装完成后，启动 Cursor。</p><h2 id="4-配置-Gemini-2-0-Flash-Exp"><a href="#4-配置-Gemini-2-0-Flash-Exp" class="headerlink" title="4. 配置 Gemini-2.0-Flash-Exp"></a>4. 配置 Gemini-2.0-Flash-Exp</h2><p>安装完成后，按照以下详细步骤配置 Gemini-2.0-Flash-Exp 模型：</p><ol><li><p><strong>打开 Cursor：</strong> 启动 Cursor 代码编辑器，确保你已经成功安装并打开了 Cursor。</p></li><li><p><strong>打开设置：</strong> 点击左下角的 “设置” 图标（齿轮形状），这将打开 Cursor 的设置页面。</p></li><li><p><strong>选择 “AI Provider”：</strong> 在设置页面中，找到 “AI Provider” 选项，通常位于 “Editor” 或 “AI” 部分。</p></li><li><p><strong>选择 “Google Gemini”：</strong> 在 “AI Provider” 下拉菜单中，选择 “Google Gemini”。如果你没有看到 “Google Gemini” 选项，请检查你的 Cursor 版本是否为最新。</p></li><li><p><strong>选择 “Gemini-2.0-Flash-Exp”：</strong> 在 “Model” 下拉菜单中，选择 “Gemini-2.0-Flash-Exp”。如果该选项不可用，请确保你的 Cursor 版本是最新的，并尝试重启 Cursor。</p><p><strong>注意：</strong> 如果你没有看到 “Gemini-2.0-Flash-Exp” 选项，请确保你的 Cursor 版本是最新的。你可以通过 “Help” -&gt; “Check for Updates” 来检查更新。</p></li><li><p><strong>保存设置：</strong> 关闭设置页面，配置会自动保存。你无需手动点击保存按钮，Cursor 会自动保存你的设置。</p></li></ol><h2 id="5-使用-Gemini-2-0-Flash-Exp：详细用法"><a href="#5-使用-Gemini-2-0-Flash-Exp：详细用法" class="headerlink" title="5. 使用 Gemini-2.0-Flash-Exp：详细用法"></a>5. 使用 Gemini-2.0-Flash-Exp：详细用法</h2><p>配置完成后，你就可以开始使用 Gemini-2.0-Flash-Exp 模型了。以下是一些详细的使用场景和技巧：</p><h3 id="5-1-代码补全：智能提示与快速编码"><a href="#5-1-代码补全：智能提示与快速编码" class="headerlink" title="5.1 代码补全：智能提示与快速编码"></a>5.1 代码补全：智能提示与快速编码</h3><p>在编写代码时，Gemini-2.0-Flash-Exp 会根据上下文提供智能的代码补全建议。它不仅能补全变量名、函数名，还能补全代码块、循环结构、类定义、接口定义等，让你快速编写代码。</p><ul><li><strong>使用技巧：</strong> 在输入代码时，留意弹出的代码提示，通常按 <code>Tab</code> 键或 <code>Enter</code> 键即可接受建议。</li><li><strong>高级用法：</strong> 你可以使用 <code>Ctrl + Space</code> （或 <code>Cmd + Space</code> 在 macOS 上）来强制触发代码补全提示。你还可以通过输入部分代码，然后按 <code>Tab</code> 键来快速生成代码片段。Cursor 还会根据你的代码风格进行代码补全，让代码风格保持一致。</li></ul><h3 id="5-2-代码生成：从描述到代码"><a href="#5-2-代码生成：从描述到代码" class="headerlink" title="5.2 代码生成：从描述到代码"></a>5.2 代码生成：从描述到代码</h3><p>你可以通过简单的描述，让 Gemini-2.0-Flash-Exp 生成代码片段。例如，你可以输入 <code>// 创建一个函数，计算两个数的和</code>，它会自动生成相应的代码。</p><ul><li><strong>使用技巧：</strong> 尽量提供清晰和详细的描述，例如，你可以说明代码的功能、输入和输出、以及异常处理、边界条件等。</li><li><strong>高级用法：</strong> 你可以使用自然语言进行更复杂的描述，例如 <code>// 创建一个函数，接收一个 JSON 字符串，解析 JSON 并返回一个字典，并处理解析失败的情况</code>。你还可以指定代码的风格和格式，例如 <code>// 用 Python 创建一个类，实现单例模式，并添加文档注释</code>。你还可以要求它生成特定语言的代码，例如 <code>// 用 JavaScript 创建一个函数，实现数组去重</code>。</li></ul><h3 id="5-3-代码解释：深入理解代码逻辑"><a href="#5-3-代码解释：深入理解代码逻辑" class="headerlink" title="5.3 代码解释：深入理解代码逻辑"></a>5.3 代码解释：深入理解代码逻辑</h3><p>选择一段代码，右键点击，然后选择 “Explain Code”，Gemini-2.0-Flash-Exp 会解释这段代码的功能和逻辑。这对于理解别人的代码或者回顾自己之前的代码非常有帮助。</p><ul><li><strong>使用技巧：</strong> 选择你需要解释的代码段，右键点击，选择 “Explain Code”。</li><li><strong>高级用法：</strong> 你可以选中较大段的代码，Gemini-2.0-Flash-Exp 会逐步解释代码的各个部分，并给出代码的执行流程、关键逻辑、以及潜在的性能瓶颈。你还可以要求它解释代码的复杂度和时间空间复杂度。</li></ul><h3 id="5-4-代码重构：优化代码结构"><a href="#5-4-代码重构：优化代码结构" class="headerlink" title="5.4 代码重构：优化代码结构"></a>5.4 代码重构：优化代码结构</h3><p>选择一段代码，右键点击，然后选择 “Refactor Code”，Gemini-2.0-Flash-Exp 会提供代码重构建议。这可以帮助你优化代码结构，提高代码质量和可维护性。</p><ul><li><strong>使用技巧：</strong> 选择你需要重构的代码段，右键点击，选择 “Refactor Code”。</li><li><strong>高级用法：</strong> 你可以选择不同的重构选项，例如提取函数、重命名变量、提取常量、简化条件表达式、删除重复代码、使用设计模式等。你还可以根据 AI 的建议，手动调整重构后的代码，并进行代码测试。</li></ul><h3 id="5-5-代码错误检测：及时发现问题（续）"><a href="#5-5-代码错误检测：及时发现问题（续）" class="headerlink" title="5.5 代码错误检测：及时发现问题（续）"></a>5.5 代码错误检测：及时发现问题（续）</h3><p>Gemini-2.0-Flash-Exp 可以帮助你检测代码中的错误和潜在问题。它会在你编写代码时给出提示，帮助你及时发现并解决问题。</p><pre><code>使用技巧： 留意编辑器中出现的错误提示，根据提示进行修改。高级用法： 你可以使用 Cursor 的代码分析功能，查看代码中的潜在问题，例如未使用的变量、潜在的内存泄漏、可能的空指针异常、类型不匹配等。你还可以让 AI 助手解释错误信息，并提供修复建议。</code></pre><h3 id="5-6-聊天功能：与-AI-助手对话（续）"><a href="#5-6-聊天功能：与-AI-助手对话（续）" class="headerlink" title="5.6 聊天功能：与 AI 助手对话（续）"></a>5.6 聊天功能：与 AI 助手对话（续）</h3><p>Cursor 还提供了聊天功能，你可以直接与 AI 助手对话，提出问题、获取帮助、或者进行代码讨论。</p><pre><code>使用技巧： 在编辑器中打开聊天窗口，输入你的问题或需求。你可以使用自然语言提问，例如“这段代码有什么问题？”或者“如何优化这段代码的性能？”高级用法： 你可以向 AI 助手请求代码示例、解释代码逻辑、或者帮助你解决编码问题。你还可以让 AI 助手为你生成测试用例、文档注释、代码片段、或者进行代码审查。你还可以让 AI 助手帮你理解复杂的代码库，或者学习新的编程语言和框架。</code></pre><h3 id="5-7-代码格式化：保持代码风格一致（续）"><a href="#5-7-代码格式化：保持代码风格一致（续）" class="headerlink" title="5.7 代码格式化：保持代码风格一致（续）"></a>5.7 代码格式化：保持代码风格一致（续）</h3><p>Cursor 提供了代码格式化功能，可以自动格式化你的代码，保持代码风格一致。</p><pre><code>使用技巧： 选择你需要格式化的代码段，右键点击，选择 &quot;Format Code&quot;。你还可以使用快捷键来快速格式化代码。高级用法： 你可以在 Cursor 的设置中配置代码格式化的规则，例如缩进大小、换行方式、空格使用等。你可以根据你的代码风格偏好进行自定义配置。</code></pre><h3 id="5-8-版本控制集成：协同开发更高效"><a href="#5-8-版本控制集成：协同开发更高效" class="headerlink" title="5.8 版本控制集成：协同开发更高效"></a>5.8 版本控制集成：协同开发更高效</h3><p>Cursor 集成了 Git 等版本控制系统，方便你管理代码版本，协同开发。</p><pre><code>使用技巧： 在 Cursor 中初始化 Git 仓库，或者克隆已有的 Git 仓库。你可以使用 Cursor 的 Git 界面进行提交、拉取、推送、分支管理等操作。高级用法： 你可以使用 Cursor 的 Git 历史查看功能，查看代码的修改历史。你还可以使用 Cursor 的代码比较功能，比较不同版本之间的代码差异。</code></pre><h2 id="6-性能优化：让-Gemini-2-0-Flash-Exp-更流畅"><a href="#6-性能优化：让-Gemini-2-0-Flash-Exp-更流畅" class="headerlink" title="6. 性能优化：让 Gemini-2.0-Flash-Exp 更流畅"></a>6. 性能优化：让 Gemini-2.0-Flash-Exp 更流畅</h2><p>虽然 Gemini-2.0-Flash-Exp 已经很快，但你还可以通过一些方法来优化其性能：</p><pre><code>保持 Cursor 最新： 确保你的 Cursor 版本是最新的，这样可以获得最新的性能优化和修复。关闭不必要的插件： 如果你安装了其他插件，并且这些插件不常用，可以尝试关闭它们，以减少 Cursor 的资源占用。限制 AI 的使用范围： 如果你只需要使用 AI 进行代码补全，可以关闭其他 AI 功能，例如代码解释和代码重构，以减少 AI 的计算量。使用更快的网络： 一个稳定的、高速的网络连接可以提高 AI 的响应速度。清理缓存： 定期清理 Cursor 的缓存，可以减少 Cursor 的资源占用，提高运行速度。合理使用 AI 功能： 不要过度依赖 AI，在需要的时候才使用 AI 功能，这样可以减少 AI 的计算量，提高响应速度。</code></pre><h2 id="7-实战示例：使用-Gemini-2-0-Flash-Exp-解决实际问题"><a href="#7-实战示例：使用-Gemini-2-0-Flash-Exp-解决实际问题" class="headerlink" title="7. 实战示例：使用 Gemini-2.0-Flash-Exp 解决实际问题"></a>7. 实战示例：使用 Gemini-2.0-Flash-Exp 解决实际问题</h2><p>为了让你更好地理解 Gemini-2.0-Flash-Exp 的使用，这里提供一些实战示例：</p><h3 id="7-1-示例-1：快速生成-API-请求代码"><a href="#7-1-示例-1：快速生成-API-请求代码" class="headerlink" title="7.1 示例 1：快速生成 API 请求代码"></a>7.1 示例 1：快速生成 API 请求代码</h3><p>假设你需要使用 JavaScript 发送一个 HTTP 请求，你可以输入以下描述：</p><p>&#x2F;&#x2F; 使用 fetch API 发送一个 POST 请求到 &#x2F;api&#x2F;users，请求体是一个 JSON 对象，包含 name 和 email 字段</p><p>Gemini-2.0-Flash-Exp 会自动生成相应的 JavaScript 代码，包括设置请求头和处理响应。</p><h3 id="7-2-示例-2：快速实现数据处理函数"><a href="#7-2-示例-2：快速实现数据处理函数" class="headerlink" title="7.2 示例 2：快速实现数据处理函数"></a>7.2 示例 2：快速实现数据处理函数</h3><p>假设你需要使用 Python 对一个列表进行排序，你可以输入以下描述：</p><h1 id="创建一个函数，接收一个整数列表，对列表进行升序排序，并返回排序后的列表"><a href="#创建一个函数，接收一个整数列表，对列表进行升序排序，并返回排序后的列表" class="headerlink" title="创建一个函数，接收一个整数列表，对列表进行升序排序，并返回排序后的列表"></a>创建一个函数，接收一个整数列表，对列表进行升序排序，并返回排序后的列表</h1><p>Gemini-2.0-Flash-Exp 会自动生成相应的 Python 代码，包括使用 sorted 函数进行排序。</p><h3 id="7-3-示例-3：快速生成单元测试代码"><a href="#7-3-示例-3：快速生成单元测试代码" class="headerlink" title="7.3 示例 3：快速生成单元测试代码"></a>7.3 示例 3：快速生成单元测试代码</h3><p>假设你有一个函数，你需要为这个函数编写单元测试代码，你可以选择这个函数，然后使用 生成测试代码 功能，Gemini-2.0-Flash-Exp 会自动为你生成测试代码框架。</p><h2 id="8-最佳实践：充分利用-Gemini-2-0-Flash-Exp"><a href="#8-最佳实践：充分利用-Gemini-2-0-Flash-Exp" class="headerlink" title="8. 最佳实践：充分利用 Gemini-2.0-Flash-Exp"></a>8. 最佳实践：充分利用 Gemini-2.0-Flash-Exp</h2><pre><code>清晰的描述： 在使用代码生成功能时，尽量提供清晰和详细的描述，包括代码的功能、输入、输出、异常处理等。逐步生成： 不要尝试一次性生成所有代码，可以逐步生成代码片段，并进行测试和验证。代码审查： 不要完全依赖 AI 生成的代码，要进行代码审查，确保代码的质量和安全性。持续学习： 持续学习新的编程语言和框架，以便更好地利用 AI 工具。反馈 AI： 如果 AI 生成的代码不符合你的预期，可以反馈给 AI，让 AI 学习和改进。组合使用： 将 AI 工具与其他开发工具结合使用，例如调试器、代码分析工具、版本控制工具等，可以提高开发效率。</code></pre><h2 id="9-常见问题和解答（续）"><a href="#9-常见问题和解答（续）" class="headerlink" title="9. 常见问题和解答（续）"></a>9. 常见问题和解答（续）</h2><pre><code>Q：为什么 Gemini-2.0-Flash-Exp 的响应速度有时候会变慢？    A： 响应速度可能会受到网络连接、服务器负载、代码复杂度和代码长度等因素的影响。可以尝试优化网络连接、减少代码复杂度、或者分段生成代码。Q：Gemini-2.0-Flash-Exp 生成的代码是否安全？    A： 虽然 Gemini-2.0-Flash-Exp 可以生成高质量的代码，但仍然需要进行代码审查，确保代码的安全性。Q：Cursor 是否支持其他 AI 模型？    A： 是的，Cursor 支持多种 AI 模型，你可以在设置中选择不同的模型。</code></pre><h2 id="10-总结"><a href="#10-总结" class="headerlink" title="10. 总结"></a>10. 总结</h2><p>通过本文的详细教程，你已经学会了如何在 Cursor 代码编辑器中免费使用 Gemini-2.0-Flash-Exp 模型。希望你能够充分利用这个强大的工具，提高编码效率，享受 AI 带来的便利。记住，AI 是你的助手，而不是你的替代品，要充分发挥你的创造力和编码能力，将 AI 工具融入你的工作流程，让你的开发工作更加高效和愉快。</p>]]></content>
      
      
      <categories>
          
          <category> AI代码助手 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cursor </tag>
            
            <tag> Gemini-2.0-Flash-Exp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Net8 + Redis缓存封装</title>
      <link href="/2024/12/14/Redis%E7%BC%93%E5%AD%98%E5%B0%81%E8%A3%85/"/>
      <url>/2024/12/14/Redis%E7%BC%93%E5%AD%98%E5%B0%81%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<div class='wow animate__heartBeat' data-wow-duration='' data-wow-delay='5s' data-wow-offset=''  data-wow-iteration='10' ><div class="note red icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>须安装Nuget包:<code>Microsoft.Extensions.Caching.StackExchangeRedis</code></p></div></div><blockquote><h2 id="缓存服务接口"><a href="#缓存服务接口" class="headerlink" title="缓存服务接口"></a>缓存服务接口</h2></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 缓存服务接口</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ICacheService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">#<span class="keyword">region</span> 设置缓存 </span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 设置缓存</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;key&quot;&gt;</span>缓存Key<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;value&quot;&gt;</span>值<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Set</span>(<span class="params"><span class="built_in">string</span> key, <span class="built_in">object</span> <span class="keyword">value</span></span>)</span>;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 设置缓存</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;key&quot;&gt;</span>缓存Key<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;value&quot;&gt;</span>值<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function">Task <span class="title">SetAsync</span>(<span class="params"><span class="built_in">string</span> key, <span class="built_in">object</span> <span class="keyword">value</span></span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 设置缓存</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 注：默认过期类型为绝对过期</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;key&quot;&gt;</span>缓存Key<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;value&quot;&gt;</span>值<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;timeout&quot;&gt;</span>过期时间间隔<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Set</span>(<span class="params"><span class="built_in">string</span> key, <span class="built_in">object</span> <span class="keyword">value</span>, TimeSpan timeout</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 设置缓存</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 注：默认过期类型为绝对过期</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;key&quot;&gt;</span>缓存Key<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;value&quot;&gt;</span>值<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;timeout&quot;&gt;</span>过期时间间隔<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function">Task <span class="title">SetAsync</span>(<span class="params"><span class="built_in">string</span> key, <span class="built_in">object</span> <span class="keyword">value</span>, TimeSpan timeout</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 设置缓存</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 注：默认过期类型为绝对过期</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;key&quot;&gt;</span>缓存Key<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;value&quot;&gt;</span>值<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;timeout&quot;&gt;</span>过期时间间隔<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;expireType&quot;&gt;</span>过期类型<span class="doctag">&lt;/param&gt;</span>  </span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Set</span>(<span class="params"><span class="built_in">string</span> key, <span class="built_in">object</span> <span class="keyword">value</span>, TimeSpan timeout, ExpireType expireType</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 设置缓存</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 注：默认过期类型为绝对过期</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;key&quot;&gt;</span>缓存Key<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;value&quot;&gt;</span>值<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;timeout&quot;&gt;</span>过期时间间隔<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;expireType&quot;&gt;</span>过期类型<span class="doctag">&lt;/param&gt;</span>  </span></span><br><span class="line">    <span class="function">Task <span class="title">SetAsync</span>(<span class="params"><span class="built_in">string</span> key, <span class="built_in">object</span> <span class="keyword">value</span>, TimeSpan timeout, ExpireType expireType</span>)</span>;</span><br><span class="line">    <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">region</span> 获取缓存</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 获取缓存</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;key&quot;&gt;</span>缓存Key<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">Get</span>(<span class="params"><span class="built_in">string</span> key</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 获取缓存</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;key&quot;&gt;</span>缓存Key<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function">Task&lt;<span class="built_in">string</span>&gt; <span class="title">GetAsync</span>(<span class="params"><span class="built_in">string</span> key</span>)</span>;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 获取缓存</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;key&quot;&gt;</span>缓存Key<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function">T <span class="title">Get</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="built_in">string</span> key</span>)</span>;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 获取缓存</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;key&quot;&gt;</span>缓存Key<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="title">Task</span>&lt;<span class="title">T</span>&gt; <span class="title">GetAsync</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="built_in">string</span> key</span>)</span>;</span><br><span class="line">    <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">region</span> 删除缓存</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 清除缓存</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;key&quot;&gt;</span>缓存Key<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Remove</span>(<span class="params"><span class="built_in">string</span> key</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 清除缓存</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;key&quot;&gt;</span>缓存Key<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function">Task <span class="title">RemoveAsync</span>(<span class="params"><span class="built_in">string</span> key</span>)</span>;</span><br><span class="line">    <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">region</span> 刷新缓存</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 刷新缓存</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;key&quot;&gt;</span>缓存Key<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Refresh</span>(<span class="params"><span class="built_in">string</span> key</span>)</span>;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 刷新缓存</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;key&quot;&gt;</span>缓存Key<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function">Task <span class="title">RefreshAsync</span>(<span class="params"><span class="built_in">string</span> key</span>)</span>;</span><br><span class="line">    <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h2 id="缓存服务实现"><a href="#缓存服务实现" class="headerlink" title="缓存服务实现"></a>缓存服务实现</h2></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 缓存服务</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CacheService</span> : <span class="title">ICacheService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 微软缓存接口</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IDistributedCache _cache;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 构造函数注入</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;cache&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CacheService</span>(<span class="params">IDistributedCache cache</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _cache = cache;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 构造缓存键</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;key&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="built_in">string</span> <span class="title">BuildKey</span>(<span class="params"><span class="built_in">string</span> key</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">$&quot;Cache_<span class="subst">&#123;GetType().FullName&#125;</span>_<span class="subst">&#123;key&#125;</span>&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">region</span> 设置缓存 </span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 设置缓存</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;key&quot;&gt;</span>缓存Key<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;value&quot;&gt;</span>值<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Set</span>(<span class="params"><span class="built_in">string</span> key,<span class="built_in">object</span> <span class="keyword">value</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _cache.SetString(BuildKey(key), JsonExt.SerializeObject(<span class="keyword">value</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 设置缓存</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;key&quot;&gt;</span>缓存Key<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;value&quot;&gt;</span>值<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">SetAsync</span>(<span class="params"><span class="built_in">string</span> key, <span class="built_in">object</span> <span class="keyword">value</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">await</span> _cache.SetStringAsync(BuildKey(key), JsonExt.SerializeObject(<span class="keyword">value</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 设置缓存</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 注：默认过期类型为绝对过期</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;key&quot;&gt;</span>缓存Key<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;value&quot;&gt;</span>值<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;timeout&quot;&gt;</span>过期时间间隔<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Set</span>(<span class="params"><span class="built_in">string</span> key, <span class="built_in">object</span> <span class="keyword">value</span>, TimeSpan timeout</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _cache.SetString(BuildKey(key), JsonExt.SerializeObject(<span class="keyword">value</span>), <span class="keyword">new</span> DistributedCacheEntryOptions</span><br><span class="line">        &#123;</span><br><span class="line">            AbsoluteExpiration = <span class="keyword">new</span> DateTimeOffset(DateTime.Now + timeout)</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 设置缓存</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 注：默认过期类型为绝对过期</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;key&quot;&gt;</span>缓存Key<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;value&quot;&gt;</span>值<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;timeout&quot;&gt;</span>过期时间间隔<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">SetAsync</span>(<span class="params"><span class="built_in">string</span> key, <span class="built_in">object</span> <span class="keyword">value</span>, TimeSpan timeout</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">await</span> _cache.SetStringAsync(BuildKey(key), JsonExt.SerializeObject(<span class="keyword">value</span>), <span class="keyword">new</span> DistributedCacheEntryOptions</span><br><span class="line">        &#123;</span><br><span class="line">            AbsoluteExpiration = <span class="keyword">new</span> DateTimeOffset(DateTime.Now + timeout)</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 设置缓存</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 注：默认过期类型为绝对过期</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;key&quot;&gt;</span>缓存Key<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;value&quot;&gt;</span>值<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;timeout&quot;&gt;</span>过期时间间隔<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;expireType&quot;&gt;</span>过期类型<span class="doctag">&lt;/param&gt;</span>  </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Set</span>(<span class="params"><span class="built_in">string</span> key, <span class="built_in">object</span> <span class="keyword">value</span>, TimeSpan timeout, ExpireType expireType</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> cacheKey = BuildKey(key);</span><br><span class="line">        <span class="keyword">if</span> (expireType == ExpireType.Absolute)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//这里没转换标准时间，Linux时区会有问题</span></span><br><span class="line">            _cache.SetString(cacheKey, JsonExt.SerializeObject(<span class="keyword">value</span>), <span class="keyword">new</span> DistributedCacheEntryOptions</span><br><span class="line">            &#123;</span><br><span class="line">                AbsoluteExpiration = <span class="keyword">new</span> DateTimeOffset(DateTime.Now + timeout)</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            _cache.SetString(cacheKey, JsonExt.SerializeObject(<span class="keyword">value</span>), <span class="keyword">new</span> DistributedCacheEntryOptions</span><br><span class="line">            &#123;</span><br><span class="line">                AbsoluteExpirationRelativeToNow = timeout</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 设置缓存</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 注：默认过期类型为绝对过期</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;key&quot;&gt;</span>缓存Key<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;value&quot;&gt;</span>值<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;timeout&quot;&gt;</span>过期时间间隔<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;expireType&quot;&gt;</span>过期类型<span class="doctag">&lt;/param&gt;</span>  </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">SetAsync</span>(<span class="params"><span class="built_in">string</span> key, <span class="built_in">object</span> <span class="keyword">value</span>, TimeSpan timeout, ExpireType expireType</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> cacheKey = BuildKey(key);</span><br><span class="line">        <span class="keyword">if</span> (expireType == ExpireType.Absolute)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//这里没转换标准时间，Linux时区会有问题</span></span><br><span class="line">            <span class="keyword">await</span> _cache.SetStringAsync(cacheKey, JsonExt.SerializeObject(<span class="keyword">value</span>), <span class="keyword">new</span> DistributedCacheEntryOptions</span><br><span class="line">            &#123;</span><br><span class="line">                AbsoluteExpiration = <span class="keyword">new</span> DateTimeOffset(DateTime.Now + timeout)</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">await</span> _cache.SetStringAsync(cacheKey, JsonExt.SerializeObject(<span class="keyword">value</span>), <span class="keyword">new</span> DistributedCacheEntryOptions</span><br><span class="line">            &#123;</span><br><span class="line">                AbsoluteExpirationRelativeToNow = timeout</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">region</span> 获取缓存</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 获取缓存</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;key&quot;&gt;</span>缓存Key<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">Get</span>(<span class="params"><span class="built_in">string</span> key</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(key))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> _cache.GetString(BuildKey(key));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 获取缓存</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;key&quot;&gt;</span>缓存Key<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;<span class="built_in">string</span>&gt; <span class="title">GetAsync</span>(<span class="params"><span class="built_in">string</span> key</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(key))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">await</span> _cache.GetStringAsync(BuildKey(key));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 获取缓存</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;key&quot;&gt;</span>缓存Key<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">Get</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="built_in">string</span> key</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> cache = Get(key);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(cache))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> JsonExt.DeserializeObject&lt;T&gt;(cache);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">default</span>(T);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 获取缓存</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;key&quot;&gt;</span>缓存Key<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> <span class="title">Task</span>&lt;<span class="title">T</span>&gt; <span class="title">GetAsync</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="built_in">string</span> key</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> cache = <span class="keyword">await</span> GetAsync(key);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(cache))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> JsonExt.DeserializeObject&lt;T&gt;(cache);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">default</span>(T);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">region</span> 删除缓存</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 清除缓存</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;key&quot;&gt;</span>缓存Key<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Remove</span>(<span class="params"><span class="built_in">string</span> key</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _cache.Remove(BuildKey(key));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 清除缓存</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;key&quot;&gt;</span>缓存Key<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">RemoveAsync</span>(<span class="params"><span class="built_in">string</span> key</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">await</span> _cache.RemoveAsync(BuildKey(key));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">region</span> 刷新缓存</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 刷新缓存</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;key&quot;&gt;</span>缓存Key<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Refresh</span>(<span class="params"><span class="built_in">string</span> key</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _cache.Refresh(BuildKey(key));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 刷新缓存</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;key&quot;&gt;</span>缓存Key<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">RefreshAsync</span>(<span class="params"><span class="built_in">string</span> key</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">await</span> _cache.RefreshAsync(BuildKey(key));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h2 id="缓存配置项"><a href="#缓存配置项" class="headerlink" title="缓存配置项"></a>缓存配置项</h2></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 缓存服务配置</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CacheServiceOption</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> CacheType CacheType &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> RedisCache Redis &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> redis缓存配置类</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RedisCache</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> redis连接字符串</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> RedisConnString &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> redis实例名称</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> InstanceName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取缓存方式 program.cs</span></span><br><span class="line"><span class="keyword">var</span> cacheOption = App.Configuration.GetSection(<span class="string">&quot;CacheService&quot;</span>).Get&lt;CacheServiceOption&gt;();</span><br><span class="line"><span class="keyword">switch</span> (cacheOption.CacheType)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">case</span> CacheType.Memory:<span class="comment">// 内存缓存</span></span><br><span class="line">        builder.Services.AddDistributedMemoryCache();</span><br><span class="line">        <span class="keyword">break</span>; </span><br><span class="line">    <span class="keyword">case</span> CacheType.Redis:<span class="comment">// 分布式缓存</span></span><br><span class="line">        builder.Services.AddStackExchangeRedisCache(options =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            options.Configuration = cacheOption.Redis.RedisConnString;</span><br><span class="line">            options.InstanceName = cacheOption.Redis.InstanceName;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="literal">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h2 id="appsetting-json"><a href="#appsetting-json" class="headerlink" title="appsetting.json"></a>appsetting.json</h2></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 缓存配置信息</span></span><br><span class="line"><span class="attr">&quot;CacheService&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;CacheType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Redis&quot;</span><span class="punctuation">,</span> <span class="comment">// 缓存类型 Memory:内存缓存 Redis:分布式缓存</span></span><br><span class="line">  <span class="attr">&quot;Redis&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;RedisConnString&quot;</span><span class="punctuation">:</span> <span class="string">&quot;127.0.0.1:6379,password=123456&quot;</span><span class="punctuation">,</span> <span class="comment">// redis连接字符串</span></span><br><span class="line">    <span class="attr">&quot;InstanceName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;RedisInstance&quot;</span> <span class="comment">// redis实例名称</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 缓存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库常用日期格式化</title>
      <link href="/2024/12/14/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B8%B8%E7%94%A8%E6%97%A5%E6%9C%9F%E6%A0%BC%E5%BC%8F%E5%8C%96/"/>
      <url>/2024/12/14/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B8%B8%E7%94%A8%E6%97%A5%E6%9C%9F%E6%A0%BC%E5%BC%8F%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<blockquote><h2 id="SqlServer-数据库"><a href="#SqlServer-数据库" class="headerlink" title="SqlServer 数据库"></a>SqlServer 数据库</h2></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--获取当天时间</span></span><br><span class="line"><span class="keyword">SELECT</span> GETDATE()</span><br><span class="line"><span class="comment">--时间格式化</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CONVERT</span>(<span class="type">varchar</span>, GETDATE(), <span class="number">120</span>) <span class="comment">--2024-09-18 16:42:56</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CONVERT</span>(<span class="type">varchar</span>(<span class="number">100</span>), GETDATE(), <span class="number">23</span>) <span class="comment">--2024-09-18</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CONVERT</span>(<span class="type">varchar</span>, GETDATE(), <span class="number">111</span>) <span class="comment">--2024/09/18</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CONVERT</span>(<span class="type">varchar</span>, GETDATE(), <span class="number">112</span>) <span class="comment">--20240918</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CONVERT</span>(<span class="type">varchar</span>, GETDATE(), <span class="number">8</span>) <span class="comment">--16:45:27</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--DATENAME([DD/MM/YY...], [时间])</span></span><br><span class="line"><span class="keyword">SELECT</span> DATENAME(DD, <span class="string">&#x27;2024-09-02 00:00:00&#x27;</span>) <span class="comment">--2</span></span><br><span class="line"><span class="keyword">SELECT</span> DATENAME(MM, <span class="string">&#x27;2024-09-02 00:00:00&#x27;</span>) <span class="comment">--09</span></span><br><span class="line"><span class="keyword">SELECT</span> DATENAME(YY, <span class="string">&#x27;2024-09-02 00:00:00&#x27;</span>) <span class="comment">--2024</span></span><br><span class="line"><span class="keyword">SELECT</span> DATENAME(DW, <span class="string">&#x27;2024-09-02 00:00:00&#x27;</span>)<span class="comment">--星期一</span></span><br><span class="line"><span class="keyword">SELECT</span> DATENAME(Y, <span class="string">&#x27;2024-09-02 00:00:00&#x27;</span>) <span class="comment">--246 （今年的第几天）</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--DATEPART([DD/MM/YY...], [时间/字符类型])</span></span><br><span class="line"><span class="keyword">SELECT</span> DATEPART(DD, <span class="string">&#x27;2024-09-02 00:00:00&#x27;</span>) <span class="comment">--2</span></span><br><span class="line"><span class="keyword">SELECT</span> DATEPART(MM, <span class="string">&#x27;2024-09-02 00:00:00&#x27;</span>) <span class="comment">--9</span></span><br><span class="line"><span class="keyword">SELECT</span> DATENAME(YY, <span class="string">&#x27;2024-09-02 00:00:00&#x27;</span>) <span class="comment">--2024</span></span><br><span class="line"><span class="keyword">SELECT</span> DATEPART(DW, <span class="string">&#x27;2024-09-02 00:00:00&#x27;</span>)<span class="comment">--2 （星期日算第一天）</span></span><br><span class="line"><span class="comment">--FORMAT([时间类型], [d/dd....])</span></span><br><span class="line"><span class="keyword">SELECT</span> FORMAT(<span class="keyword">CONVERT</span>(DateTime, <span class="string">&#x27;2024-09-02 00:00:00&#x27;</span>), <span class="string">&#x27;yyyy&#x27;</span>)<span class="comment">--2024</span></span><br><span class="line"><span class="keyword">SELECT</span> FORMAT(<span class="keyword">CONVERT</span>(DateTime, <span class="string">&#x27;2024-09-02 00:00:00&#x27;</span>), <span class="string">&#x27;MM&#x27;</span>)<span class="comment">--09</span></span><br><span class="line"><span class="keyword">SELECT</span> FORMAT(<span class="keyword">CONVERT</span>(DateTime, <span class="string">&#x27;2024-09-02 00:00:00&#x27;</span>), <span class="string">&#x27;dd&#x27;</span>)<span class="comment">--02</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--常见的需求总结：</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CONVERT</span>(<span class="type">varchar</span>, GETDATE(), <span class="number">120</span>) <span class="comment">--2024-09-18 16:42:56</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CONVERT</span>(<span class="type">varchar</span>(<span class="number">100</span>), GETDATE(), <span class="number">23</span>) <span class="comment">--2024-09-18</span></span><br><span class="line"><span class="keyword">SELECT</span> FORMAT(<span class="keyword">CONVERT</span>(DateTime, <span class="string">&#x27;2024-09-02 00:00:00&#x27;</span>), <span class="string">&#x27;D&#x27;</span>) <span class="comment">--2024年9月2日</span></span><br><span class="line"><span class="keyword">SELECT</span> FORMAT(<span class="keyword">CONVERT</span>(DateTime, <span class="string">&#x27;2024-09-02 00:00:00&#x27;</span>), <span class="string">&#x27;m&#x27;</span>) <span class="comment">--9月2日</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CONVERT</span>(<span class="type">VARCHAR</span>, </span><br><span class="line">    <span class="keyword">CASE</span> </span><br><span class="line">        <span class="keyword">WHEN</span> DATEPART(DW, GETDATE()) <span class="operator">=</span> <span class="number">1</span> <span class="keyword">THEN</span> DATEADD(dd, <span class="number">-6</span>, GETDATE())</span><br><span class="line">        <span class="keyword">ELSE</span> DATEADD(DD, <span class="operator">-</span> (DATEPART(dw, GETDATE()) <span class="operator">-</span> <span class="number">2</span>), GETDATE())</span><br><span class="line">    <span class="keyword">END</span>, <span class="number">23</span>);<span class="comment">--获取本周周一日期</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CONVERT</span>(<span class="type">VARCHAR</span>,</span><br><span class="line">    <span class="keyword">CASE</span> </span><br><span class="line">        <span class="keyword">WHEN</span> DATEPART(DW, GETDATE()) <span class="operator">=</span> <span class="number">1</span> <span class="keyword">THEN</span> GETDATE()</span><br><span class="line">        <span class="keyword">ELSE</span> DATEADD(DD, <span class="number">8</span> <span class="operator">-</span> DATEPART(DW, GETDATE()), GETDATE()) </span><br><span class="line">    <span class="keyword">END</span>, <span class="number">23</span>);<span class="comment">--获取本周日日期</span></span><br><span class="line"><span class="keyword">SELECT</span> DATEADD(MM, DATEDIFF(MM, <span class="number">0</span>, GETDATE()), <span class="number">0</span>) <span class="comment">--获取本月第一天日期</span></span><br><span class="line"><span class="keyword">SELECT</span> DATEADD(MM, DATEDIFF(MM, <span class="number">0</span>, GETDATE()) <span class="operator">+</span> <span class="number">1</span>, <span class="number">-1</span>)<span class="comment">--获取本月最后一天日期</span></span><br></pre></td></tr></table></figure><blockquote><h2 id="MySql-数据库"><a href="#MySql-数据库" class="headerlink" title="MySql 数据库"></a>MySql 数据库</h2><p>在MySQL中，你可以使用DATE_FORMAT()函数来格式化日期。DATE_FORMAT() 函数通常用于格式化 DATETIME 或 TIMESTAMP类型的字段</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>年<span class="operator">-</span>月<span class="operator">-</span>日</span><br><span class="line"><span class="keyword">SELECT</span> DATE_FORMAT(NOW(), <span class="string">&#x27;%Y-%m-%d&#x27;</span>); </span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>月<span class="operator">/</span>日<span class="operator">/</span>年</span><br><span class="line"><span class="keyword">SELECT</span> DATE_FORMAT(NOW(), <span class="string">&#x27;%m/%d/%Y&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>完整的日期和时间</span><br><span class="line"><span class="keyword">SELECT</span> DATE_FORMAT(NOW(), <span class="string">&#x27;%Y-%m-%d %H:%i:%s&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>小时和分钟</span><br><span class="line"><span class="keyword">SELECT</span> DATE_FORMAT(NOW(), <span class="string">&#x27;%H:%i&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>星期几</span><br><span class="line"><span class="keyword">SELECT</span> DATE_FORMAT(NOW(), <span class="string">&#x27;%W&#x27;</span>); <span class="comment">-- 星期几（Sunday=0, ..., Saturday=6）</span></span><br><span class="line"></span><br><span class="line"><span class="number">6.</span>月份的名称</span><br><span class="line"><span class="keyword">SELECT</span> DATE_FORMAT(NOW(), <span class="string">&#x27;%M&#x27;</span>); <span class="comment">-- 月份的名称（January, ..., December）</span></span><br><span class="line"></span><br><span class="line"><span class="number">7.</span>月份的缩写</span><br><span class="line"><span class="keyword">SELECT</span> DATE_FORMAT(NOW(), <span class="string">&#x27;%b&#x27;</span>); <span class="comment">-- 月份的缩写（Jan, ..., Dec）</span></span><br><span class="line"></span><br><span class="line"><span class="number">8.</span>年份的最后两位数字</span><br><span class="line"><span class="keyword">SELECT</span> DATE_FORMAT(NOW(), <span class="string">&#x27;%y&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="number">9.</span>AM或PM</span><br><span class="line"><span class="keyword">SELECT</span> DATE_FORMAT(NOW(), <span class="string">&#x27;%p&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="number">10.</span>秒</span><br><span class="line"><span class="keyword">SELECT</span> DATE_FORMAT(NOW(), <span class="string">&#x27;%s&#x27;</span>);</span><br><span class="line"></span><br><span class="line">如果你有一个非日期时间类型的字段，但你知道它包含的是日期或时间信息，</span><br><span class="line">你可能需要先将其转换为 DATETIME 类型，然后再使用 DATE_FORMAT() 函数。</span><br><span class="line">例如，如果一个 <span class="type">VARCHAR</span> 字段包含日期时间字符串，你可以使用 STR_TO_DATE() 函数将其转换</span><br><span class="line"></span><br><span class="line"><span class="comment">--STR_TO_DATE() 函数将字符串转换为 DATETIME 类型，然后 DATE_FORMAT() 函数将其格式化为所需的格式</span></span><br><span class="line"><span class="keyword">SELECT</span> DATE_FORMAT(STR_TO_DATE(your_column, <span class="string">&#x27;%Y-%m-%d %H:%i:%s&#x27;</span>), <span class="string">&#x27;%Y-%m-%d %H:%i:%s&#x27;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SqlSugar DbContext</title>
      <link href="/2023/02/16/SqlSugar/"/>
      <url>/2023/02/16/SqlSugar/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h1><div class="note blue no-icon flat"><p><strong>什么是SqlSugar?</strong><br>SqlSugar 是 .NET&#x2F;C# 平台非常优秀的 ORM 框架，目前 Nuget 总下载突破 1000K，Github 关注量也高达 3.7K<br>SqlSugar 拥有高性能，具有百万级插入、更新大数据分表等特色功能,是目前当之无愧的国产优秀 ORM 框架之一。</p><ol><li>支持 <code>MySql</code>、<code>SqlServer</code>、<code>Sqlite</code>、<code>Oracle</code>、<code>postgresql</code>、<code>达梦</code>、<code>人大金仓</code> 等多种数据库</li><li>支持 <code>全自动分表</code></li><li>支持 <code>多库事务</code></li><li>支持 <code>CodeFirst</code> &#x2F; <code>DbFirst</code></li><li>支持 <code>联表查询</code>、<code>嵌套查询</code>、<code>导航查询</code>、<code>子查询</code>、<code>动态JSON查询</code>等查询操作</li><li>支持 SqlServer、MySql、PgSql、Oracle <code>百万级插入和更新</code></li></ol><p><strong>个人感受</strong><br>其实说起来接触<code>SqlSugar</code>的时间并不是很长,但是用过之后,只有一个感觉:太丝滑了!<br>文档齐全,新手上路贼容易,真的<span class='p red'>强烈推荐</span>!!!<br>目前本人手里的项目,只要与数据库交互的,已经统统切换成了<code>SqlSugar</code></p><p><strong>官方文档</strong></p><div class="hide-block"><button type="button" class="hide-button" style="background-color:  orange;">点我查看    </button><div class="hide-content"><div class="tag link"><a class="link-card" title="SqlSugar文档教程贴" href="https://www.donet5.com/Home/Doc"><div class="left"><img src="https://www.donet5.com/HtmlTemplate2/com_files/logo.png"/></div><div class="right"><p class="text">SqlSugar文档教程贴</p><p class="url">https://www.donet5.com/Home/Doc</p></div></a></div></div></div></div><h1 id="Net-Framework部分"><a href="#Net-Framework部分" class="headerlink" title=".Net Framework部分"></a><strong>.Net Framework部分</strong></h1><details class="folding-tag" cyan><summary> 代码 & 使用 </summary>              <div class='content'>              <blockquote><p><strong>完整代码</strong></p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Configuration;</span><br><span class="line"><span class="keyword">using</span> System.Data;</span><br><span class="line"><span class="keyword">using</span> System.Linq.Expressions;</span><br><span class="line"><span class="keyword">using</span> SqlSugar;</span><br><span class="line"><span class="keyword">using</span> DbType = SqlSugar.DbType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CodeProject.Database</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 数据库上下文</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SqlSugarDbContext</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 数据库连接字符串(私有字段)</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">string</span> DbConnString = ConfigurationManager.ConnectionStrings[<span class="string">&quot;sqlConStr&quot;</span>].ConnectionString;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 数据库类型(私有字段)</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">string</span> _databaseType = ConfigurationManager.ConnectionStrings[<span class="string">&quot;sqlConStr&quot;</span>].ProviderName;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 用来处理事务多表查询和复杂的操作</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 注意：不能写成静态的</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> SqlSugarClient Db;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">SqlSugarDbContext</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            DbType dbType;</span><br><span class="line">            <span class="keyword">switch</span> (_databaseType)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;System.Data.SqlClient&quot;</span>:</span><br><span class="line">                    dbType = DbType.SqlServer;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;System.Data.SqliteClient&quot;</span>:</span><br><span class="line">                    dbType = DbType.Sqlite;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;MySql.Data.MySqlClient&quot;</span>:</span><br><span class="line">                    dbType = DbType.MySql;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;Oracle.ManagedDataAccess.Client&quot;</span>:</span><br><span class="line">                    dbType = DbType.Oracle;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="literal">default</span>:</span><br><span class="line">                    dbType = DbType.SqlServer;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Db = <span class="keyword">new</span> SqlSugarClient(<span class="keyword">new</span> ConnectionConfig()</span><br><span class="line">            &#123;</span><br><span class="line">                ConnectionString = DbConnString,<span class="comment">//数据库连接串</span></span><br><span class="line">                DbType = dbType,<span class="comment">//数据库类型</span></span><br><span class="line">                InitKeyType = InitKeyType.SystemTable,<span class="comment">//从数据库中读取主键和自增列信息         //InitKeyType.Attribute,//从特性读取主键和自增列信息</span></span><br><span class="line">                IsAutoCloseConnection = <span class="literal">true</span>,<span class="comment">//开启自动释放模式和EF原理一样我就不多解释了</span></span><br><span class="line"></span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">//调式代码 用来打印SQL </span></span><br><span class="line">            Db.Aop.OnLogExecuting = (sql, pars) =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(sql + <span class="string">&quot;\r\n&quot;</span> +</span><br><span class="line">                    Db.Utilities.SerializeObject(pars.ToDictionary(it =&gt; it.ParameterName, it =&gt; it.Value)));</span><br><span class="line">                Console.WriteLine();</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="keyword">region</span> 库表操作</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 备份表</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;oldname&quot;&gt;</span>旧表名称<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;newname&quot;&gt;</span>新表名称<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="built_in">bool</span> <span class="title">BackupTable</span>(<span class="params"><span class="built_in">string</span> oldname, <span class="built_in">string</span> newname</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!Db.DbMaintenance.IsAnyTable(newname, <span class="literal">false</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> Db.DbMaintenance.BackupTable(oldname, newname, <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 删除表</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;tablename&quot;&gt;</span>表名称<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="built_in">bool</span> <span class="title">DropTable</span>(<span class="params"><span class="built_in">string</span> tablename</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> Db.DbMaintenance.DropTable(tablename);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 清空表</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;tablename&quot;&gt;</span>表名称<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="built_in">bool</span> <span class="title">TruncateTable</span>(<span class="params"><span class="built_in">string</span> tablename</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> Db.DbMaintenance.TruncateTable(tablename);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="keyword">region</span> CodeFirst 类--&gt;表</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 创建单一表 </span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;entityType&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CreateTable</span>(<span class="params">Type entityType</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Db.CodeFirst.SetStringDefaultLength(<span class="number">200</span>).BackupTable().InitTables(entityType);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 批量创建表</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;entityTypes&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CreateTables</span>(<span class="params">Type[] entityTypes</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Db.CodeFirst.SetStringDefaultLength(<span class="number">200</span>).BackupTable().InitTables(entityTypes);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="keyword">region</span> DbFirst 表--&gt;类</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 根据数据库表 生成实体类文件</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 数据库表名统一格式:XX_XXX  如:Sys_UserInfo</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;filePath&quot;&gt;</span>类文件地址<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;nameSpace&quot;&gt;</span>命名空间<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;tableName&quot;&gt;</span>表名称<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">CreateClassFiles</span>(<span class="params"><span class="built_in">string</span> filePath, <span class="built_in">string</span> nameSpace, <span class="built_in">string</span> tableName</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="meta">#<span class="keyword">region</span> 格式化 实体类文件名称</span></span><br><span class="line">            <span class="comment">//循环遍历 数据库里的所有表  </span></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> Db.DbMaintenance.GetTableInfoList())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">string</span> entityName = <span class="built_in">string</span>.Empty;</span><br><span class="line">                <span class="keyword">if</span> (item.Name.Contains(<span class="string">&quot;_&quot;</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">var</span> tbName = item.Name.Split(<span class="string">&#x27;_&#x27;</span>);</span><br><span class="line">                    entityName = tbName[<span class="number">1</span>] + <span class="string">&quot;Entity&quot;</span>;</span><br><span class="line">                    Db.MappingTables.Add(entityName, item.Name);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    entityName = item.Name + <span class="string">&quot;Entity&quot;</span>;</span><br><span class="line">                    Db.MappingTables.Add(entityName, item.Name);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//循环遍历  当前表的所有列</span></span><br><span class="line">                <span class="keyword">foreach</span> (<span class="keyword">var</span> col <span class="keyword">in</span> Db.DbMaintenance.GetColumnInfosByTableName(item.Name))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//所有列全部转大写</span></span><br><span class="line">                    Db.MappingColumns.Add(col.DbColumnName.ToUpper(), col.DbColumnName, entityName);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//生成指定表名的实体类文件</span></span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(tableName))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//生成带有SqlSugar特性的实体类文件</span></span><br><span class="line">                Db.DbFirst.Where(tableName).IsCreateAttribute(<span class="literal">true</span>).CreateClassFile(filePath, nameSpace);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//生成所有表的实体类文件</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//生成带有SqlSugar特性的实体类文件</span></span><br><span class="line">                Db.DbFirst.IsCreateAttribute(<span class="literal">true</span>).CreateClassFile(filePath, nameSpace);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line">        <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="keyword">region</span> 事务操作</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 开启事务</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">BeginTran</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Db.Ado.BeginTran();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 提交事务 </span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">CommitTran</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Db.Ado.CommitTran();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 回滚事务</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">RollbackTran</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Db.Ado.RollbackTran();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="keyword">region</span> 原生Sql</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 针对于 增删改</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;sql&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="built_in">int</span> <span class="title">ExecuteCommand</span>(<span class="params"><span class="built_in">string</span> sql, <span class="keyword">params</span> SugarParameter[] pars</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> Db.Ado.ExecuteCommand(sql, pars);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 返回集合</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;sql&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>返回DataTable<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> DataTable <span class="title">GetDataTable</span>(<span class="params"><span class="built_in">string</span> sql, <span class="keyword">params</span> SugarParameter[] pars</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> Db.Ado.GetDataTable(sql, pars);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 返回多个集合</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;sql&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;pars&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> DataSet <span class="title">GetDataSet</span>(<span class="params"><span class="built_in">string</span> sql, <span class="keyword">params</span> SugarParameter[] pars</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> Db.Ado.GetDataSetAll(sql, pars);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 调用存储过程 返回Output参数</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;sql&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;pars&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>返回int<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="built_in">int</span> <span class="title">ExecProcToInt</span>(<span class="params"><span class="built_in">string</span> sql, <span class="keyword">params</span> SugarParameter[] pars</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> proc_count = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                BeginTran();</span><br><span class="line">                proc_count = Db.Ado.UseStoredProcedure().GetInt(sql, pars);</span><br><span class="line">                CommitTran();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">            &#123;</span><br><span class="line">                RollbackTran();</span><br><span class="line">                <span class="keyword">throw</span> ex;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> proc_count;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 调用存储过程</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;sql&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;pars&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>返回DataTable<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> DataTable <span class="title">ExecProcToDT</span>(<span class="params"><span class="built_in">string</span> sql, <span class="keyword">params</span> SugarParameter[] pars</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            DataTable dt = <span class="keyword">new</span> DataTable();</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                BeginTran();</span><br><span class="line">                dt = Db.Ado.UseStoredProcedure().GetDataTable(sql, pars);</span><br><span class="line">                CommitTran();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">            &#123;</span><br><span class="line">                RollbackTran();</span><br><span class="line">                <span class="keyword">throw</span> ex;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> dt;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 调用存储过程</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;sql&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;pars&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>返回DataSet<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> DataSet <span class="title">ExecProcToDS</span>(<span class="params"><span class="built_in">string</span> sql, <span class="keyword">params</span> SugarParameter[] pars</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            DataSet ds = <span class="keyword">new</span> DataSet();</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                BeginTran();</span><br><span class="line">                ds = Db.Ado.UseStoredProcedure().GetDataSetAll(sql, pars);</span><br><span class="line">                CommitTran();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">            &#123;</span><br><span class="line">                RollbackTran();</span><br><span class="line">                <span class="keyword">throw</span> ex;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> ds;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="keyword">region</span> 泛型CURD</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 校验数据是否存在</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;expression&quot;&gt;</span>Lambda表达式（查询条件）<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="built_in">bool</span> <span class="title">Any</span>&lt;<span class="title">TEntity</span>&gt;(<span class="params">Expression&lt;Func&lt;TEntity, <span class="built_in">bool</span>&gt;&gt; expression</span>) <span class="keyword">where</span> TEntity : <span class="keyword">class</span>, <span class="keyword">new</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> Db.Queryable&lt;TEntity&gt;().Any(expression);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 检查信息总条数</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;expression&quot;&gt;</span>Lambda表达式（查询条件）<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="built_in">int</span> <span class="title">Count</span>&lt;<span class="title">TEntity</span>&gt;(<span class="params">Expression&lt;Func&lt;TEntity, <span class="built_in">bool</span>&gt;&gt; expression</span>) <span class="keyword">where</span> TEntity : <span class="keyword">class</span>, <span class="keyword">new</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> Db.Queryable&lt;TEntity&gt;().Count(expression);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 查询实体</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;keyValue&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>单条记录<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> TEntity <span class="title">FindEntity</span>&lt;<span class="title">TEntity</span>&gt;(<span class="params"><span class="built_in">object</span> keyValue</span>) <span class="keyword">where</span> TEntity : <span class="keyword">class</span>, <span class="keyword">new</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> Db.Queryable&lt;TEntity&gt;().InSingle(keyValue);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 查询实体集合</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="title">ISugarQueryable</span>&lt;<span class="title">TEntity</span>&gt; <span class="title">Queryable</span>&lt;<span class="title">TEntity</span>&gt;() <span class="keyword">where</span> TEntity : <span class="keyword">class</span>, <span class="keyword">new</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> Db.Queryable&lt;TEntity&gt;();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 自定义条件查询</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;expression&quot;&gt;</span>Lambda表达式（查询条件）<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="title">ISugarQueryable</span>&lt;<span class="title">TEntity</span>&gt; <span class="title">Queryable</span>&lt;<span class="title">TEntity</span>&gt;(<span class="params">Expression&lt;Func&lt;TEntity, <span class="built_in">bool</span>&gt;&gt; expression</span>) <span class="keyword">where</span> TEntity : <span class="keyword">class</span>, <span class="keyword">new</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> Db.Queryable&lt;TEntity&gt;().Where(expression);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 通过SQL语句查询</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strSql&quot;&gt;</span>SQL语句<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="title">ISugarQueryable</span>&lt;<span class="title">TEntity</span>&gt; <span class="title">Queryable</span>&lt;<span class="title">TEntity</span>&gt;(<span class="params"><span class="built_in">string</span> strSql</span>) <span class="keyword">where</span> TEntity : <span class="keyword">class</span>, <span class="keyword">new</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> Db.SqlQueryable&lt;TEntity&gt;(strSql);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 新增</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;entity&quot;&gt;</span>实体信息<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="built_in">int</span> <span class="title">Insertable</span>&lt;<span class="title">TEntity</span>&gt;(<span class="params">TEntity entity</span>) <span class="keyword">where</span> TEntity : <span class="keyword">class</span>, <span class="keyword">new</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> Db.Insertable(entity).ExecuteCommand();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 批量新增</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;entities&quot;&gt;</span>实体信息集合<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="built_in">int</span> <span class="title">Insertable</span>&lt;<span class="title">TEntity</span>&gt;(<span class="params">List&lt;TEntity&gt; entities</span>) <span class="keyword">where</span> TEntity : <span class="keyword">class</span>, <span class="keyword">new</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> Db.Insertable(entities).ExecuteCommand();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 编辑</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;entity&quot;&gt;</span>实体信息<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="built_in">int</span> <span class="title">Updateable</span>&lt;<span class="title">TEntity</span>&gt;(<span class="params">TEntity entity</span>) <span class="keyword">where</span> TEntity : <span class="keyword">class</span>, <span class="keyword">new</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> Db.Updateable(entity).IgnoreColumns(ignoreAllNullColumns: <span class="literal">true</span>).ExecuteCommand();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 自定义条件编辑</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;content&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;predicate&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="built_in">int</span> <span class="title">Updateable</span>&lt;<span class="title">TEntity</span>&gt;(<span class="params">Expression&lt;Func&lt;TEntity, TEntity&gt;&gt; content, Expression&lt;Func&lt;TEntity, <span class="built_in">bool</span>&gt;&gt; predicate</span>) <span class="keyword">where</span> TEntity : <span class="keyword">class</span>, <span class="keyword">new</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> Db.Updateable(content).Where(predicate).ExecuteCommand();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 删除</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;entity&quot;&gt;</span>实体信息<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="built_in">int</span> <span class="title">Deleteable</span>&lt;<span class="title">TEntity</span>&gt;(<span class="params">TEntity entity</span>) <span class="keyword">where</span> TEntity : <span class="keyword">class</span>, <span class="keyword">new</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> Db.Deleteable(entity).ExecuteCommand();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 自定义条件删除</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;expression&quot;&gt;</span>Lambda表达式（查询条件）<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="built_in">int</span> <span class="title">Deleteable</span>&lt;<span class="title">TEntity</span>&gt;(<span class="params">Expression&lt;Func&lt;TEntity, <span class="built_in">bool</span>&gt;&gt; expression</span>) <span class="keyword">where</span> TEntity : <span class="keyword">class</span>, <span class="keyword">new</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> Db.Deleteable(expression).ExecuteCommand();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>使用示例</strong></p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数据库上下文 初始化</span></span><br><span class="line">SqlSugarDbContext db = <span class="keyword">new</span> SqlSugarDbContext();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">region</span> 原生Sql</span></span><br><span class="line"><span class="keyword">var</span> dt = db.GetDataTable(strSql,pars);<span class="comment">//返回DataTable</span></span><br><span class="line"><span class="keyword">var</span> ds = db.GetDataSet(strSql,pars);<span class="comment">//返回DataSet</span></span><br><span class="line"><span class="keyword">var</span> count = db.ExcuteCommand(strSql,pars);<span class="comment">//针对于增删改,返回受影响行数</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">region</span> 泛型CURD</span></span><br><span class="line"><span class="keyword">var</span> list = db.Queryable&lt;TEntity&gt;().ToList();<span class="comment">//返回集合</span></span><br><span class="line"><span class="keyword">var</span> list = db.Queryable&lt;TEntity&gt;(expression).ToList();<span class="comment">//返回集合</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>              </div>            </details><h1 id="Net-Core部分"><a href="#Net-Core部分" class="headerlink" title=".Net Core部分"></a><strong>.Net Core部分</strong></h1><details class="folding-tag" cyan><summary> 代码 & 使用 </summary>              <div class='content'>              <blockquote><p><strong>完整代码</strong></p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ORM </tag>
            
            <tag> SqlSugar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebForm程序中集成Mvc4的方法</title>
      <link href="/2023/02/16/WebForm%E7%A8%8B%E5%BA%8F%E4%B8%AD%E9%9B%86%E6%88%90Mvc4%E7%9A%84%E6%96%B9%E6%B3%95/"/>
      <url>/2023/02/16/WebForm%E7%A8%8B%E5%BA%8F%E4%B8%AD%E9%9B%86%E6%88%90Mvc4%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<div class="note blue no-icon flat"><p>本文为大家分享了asp.net 4.0+ webform程序中集成mvc4的方法，供大家参考，具体内容如下</p></div><h1 id="新建packages-config文件，里面加上必要的程序集"><a href="#新建packages-config文件，里面加上必要的程序集" class="headerlink" title="新建packages.config文件，里面加上必要的程序集"></a><strong>新建packages.config文件，里面加上必要的程序集</strong></h1><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="line">&lt;packages&gt;</span><br><span class="line"> &lt;package id=<span class="string">&quot;Microsoft.AspNet.Mvc&quot;</span> version=<span class="string">&quot;4.0.20710.0&quot;</span> targetFramework=<span class="string">&quot;net40&quot;</span> /&gt;</span><br><span class="line"> &lt;package id=<span class="string">&quot;Microsoft.AspNet.Mvc.FixedDisplayModes&quot;</span> version=<span class="string">&quot;1.0.0&quot;</span> targetFramework=<span class="string">&quot;net40&quot;</span> /&gt;</span><br><span class="line"> &lt;package id=<span class="string">&quot;Microsoft.AspNet.Mvc.zh-Hans&quot;</span> version=<span class="string">&quot;4.0.20710.0&quot;</span> targetFramework=<span class="string">&quot;net40&quot;</span> /&gt;</span><br><span class="line"> &lt;package id=<span class="string">&quot;Microsoft.AspNet.Razor&quot;</span> version=<span class="string">&quot;2.0.20715.0&quot;</span> targetFramework=<span class="string">&quot;net40&quot;</span> /&gt;</span><br><span class="line"> &lt;package id=<span class="string">&quot;Microsoft.AspNet.Razor.zh-Hans&quot;</span> version=<span class="string">&quot;2.0.20715.0&quot;</span> targetFramework=<span class="string">&quot;net40&quot;</span> /&gt;</span><br><span class="line"> &lt;package id=<span class="string">&quot;Microsoft.AspNet.Web.Optimization&quot;</span> version=<span class="string">&quot;1.0.0&quot;</span> targetFramework=<span class="string">&quot;net40&quot;</span> /&gt;</span><br><span class="line"> &lt;package id=<span class="string">&quot;Microsoft.AspNet.Web.Optimization.zh-Hans&quot;</span> version=<span class="string">&quot;1.0.0&quot;</span> targetFramework=<span class="string">&quot;net40&quot;</span> /&gt;</span><br><span class="line"> &lt;package id=<span class="string">&quot;Microsoft.AspNet.WebApi&quot;</span> version=<span class="string">&quot;4.0.20710.0&quot;</span> targetFramework=<span class="string">&quot;net40&quot;</span> /&gt;</span><br><span class="line"> &lt;package id=<span class="string">&quot;Microsoft.AspNet.WebApi.Client&quot;</span> version=<span class="string">&quot;4.0.20710.0&quot;</span> targetFramework=<span class="string">&quot;net40&quot;</span> /&gt;</span><br><span class="line"> &lt;package id=<span class="string">&quot;Microsoft.AspNet.WebApi.Client.zh-Hans&quot;</span> version=<span class="string">&quot;4.0.20710.0&quot;</span> targetFramework=<span class="string">&quot;net40&quot;</span> /&gt;</span><br><span class="line"> &lt;package id=<span class="string">&quot;Microsoft.AspNet.WebApi.Core&quot;</span> version=<span class="string">&quot;4.0.20710.0&quot;</span> targetFramework=<span class="string">&quot;net40&quot;</span> /&gt;</span><br><span class="line"> &lt;package id=<span class="string">&quot;Microsoft.AspNet.WebApi.Core.zh-Hans&quot;</span> version=<span class="string">&quot;4.0.20710.0&quot;</span> targetFramework=<span class="string">&quot;net40&quot;</span> /&gt;</span><br><span class="line"> &lt;package id=<span class="string">&quot;Microsoft.AspNet.WebApi.WebHost&quot;</span> version=<span class="string">&quot;4.0.20710.0&quot;</span> targetFramework=<span class="string">&quot;net40&quot;</span> /&gt;</span><br><span class="line"> &lt;package id=<span class="string">&quot;Microsoft.AspNet.WebApi.WebHost.zh-Hans&quot;</span> version=<span class="string">&quot;4.0.20710.0&quot;</span> targetFramework=<span class="string">&quot;net40&quot;</span> /&gt;</span><br><span class="line"> &lt;package id=<span class="string">&quot;Microsoft.AspNet.WebPages&quot;</span> version=<span class="string">&quot;2.0.20710.0&quot;</span> targetFramework=<span class="string">&quot;net40&quot;</span> /&gt;</span><br><span class="line"> &lt;package id=<span class="string">&quot;Microsoft.AspNet.WebPages.zh-Hans&quot;</span> version=<span class="string">&quot;2.0.20710.0&quot;</span> targetFramework=<span class="string">&quot;net40&quot;</span> /&gt;</span><br><span class="line"> &lt;package id=<span class="string">&quot;Microsoft.Net.Http&quot;</span> version=<span class="string">&quot;2.0.20710.0&quot;</span> targetFramework=<span class="string">&quot;net40&quot;</span> /&gt;</span><br><span class="line"> &lt;package id=<span class="string">&quot;Microsoft.Net.Http.zh-Hans&quot;</span> version=<span class="string">&quot;2.0.20710.0&quot;</span> targetFramework=<span class="string">&quot;net40&quot;</span> /&gt;</span><br><span class="line"> &lt;package id=<span class="string">&quot;Microsoft.Web.Infrastructure&quot;</span> version=<span class="string">&quot;1.0.0.0&quot;</span> targetFramework=<span class="string">&quot;net40&quot;</span> /&gt;</span><br><span class="line"> &lt;package id=<span class="string">&quot;Newtonsoft.Json&quot;</span> version=<span class="string">&quot;4.5.11&quot;</span> targetFramework=<span class="string">&quot;net40&quot;</span> /&gt;</span><br><span class="line"> &lt;package id=<span class="string">&quot;WebGrease&quot;</span> version=<span class="string">&quot;1.1.0&quot;</span> targetFramework=<span class="string">&quot;net40&quot;</span> /&gt;</span><br><span class="line">&lt;/packages&gt;</span><br></pre></td></tr></table></figure><h1 id="在对应web项目中还原包"><a href="#在对应web项目中还原包" class="headerlink" title="在对应web项目中还原包"></a><strong>在对应web项目中还原包</strong></h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update-package -projectname <span class="string">&#x27;YourProject&#x27;</span> -reinstall </span><br></pre></td></tr></table></figure><h1 id="新建App-Start目录，在里面加上mvc对应配置代码"><a href="#新建App-Start目录，在里面加上mvc对应配置代码" class="headerlink" title="新建App_Start目录，在里面加上mvc对应配置代码"></a><strong>新建App_Start目录，在里面加上mvc对应配置代码</strong></h1><h3 id="BundleConfig-cs为静态文件压缩的配置代码，参考代码如下"><a href="#BundleConfig-cs为静态文件压缩的配置代码，参考代码如下" class="headerlink" title="BundleConfig.cs为静态文件压缩的配置代码，参考代码如下"></a><strong>BundleConfig.cs为静态文件压缩的配置代码，参考代码如下</strong></h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BundleConfig</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="comment">// 有关 Bundling 的详细信息，请访问 http://go.microsoft.com/fwlink/?LinkId=254725</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">RegisterBundles</span>(<span class="params">BundleCollection bundles</span>)</span></span><br><span class="line"> &#123;</span><br><span class="line">  bundles.Add(<span class="keyword">new</span> ScriptBundle(<span class="string">&quot;~/bundles/jquery&quot;</span>).Include(</span><br><span class="line">     <span class="string">&quot;~/Scripts/jquery-&#123;version&#125;.js&quot;</span>));</span><br><span class="line">  bundles.Add(<span class="keyword">new</span> ScriptBundle(<span class="string">&quot;~/bundles/common&quot;</span>).Include(<span class="string">&quot;~/js/common*&quot;</span>));</span><br><span class="line">  bundles.Add(<span class="keyword">new</span> ScriptBundle(<span class="string">&quot;~/bundles/echarts&quot;</span>).Include(<span class="string">&quot;~/js/echarts.common*&quot;</span>));</span><br><span class="line">  bundles.Add(<span class="keyword">new</span> ScriptBundle(<span class="string">&quot;~/bundles/mustache&quot;</span>).Include(<span class="string">&quot;~/js/mustache*&quot;</span>));</span><br><span class="line">  bundles.Add(<span class="keyword">new</span> ScriptBundle(<span class="string">&quot;~/bundles/blockUI&quot;</span>).Include(<span class="string">&quot;~/js/jquery.blockUI*&quot;</span>));</span><br><span class="line">  bundles.Add(<span class="keyword">new</span> StyleBundle(<span class="string">&quot;~/Content/oa/css&quot;</span>).Include(<span class="string">&quot;~/css/oa/style.css&quot;</span>));</span><br><span class="line">  <span class="comment">//BundleTable.EnableOptimizations = true;</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RouteConfig-cs为路由配置代码，web-form相关资源要在此处忽略路由过滤"><a href="#RouteConfig-cs为路由配置代码，web-form相关资源要在此处忽略路由过滤" class="headerlink" title="RouteConfig.cs为路由配置代码，web form相关资源要在此处忽略路由过滤"></a><strong>RouteConfig.cs为路由配置代码，web form相关资源要在此处忽略路由过滤</strong></h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RouteConfig</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">RegisterRoutes</span>(<span class="params">RouteCollection routes</span>)</span></span><br><span class="line"> &#123;</span><br><span class="line">  routes.IgnoreRoute(<span class="string">&quot;&#123;resource&#125;.axd/&#123;*pathInfo&#125;&quot;</span>);</span><br><span class="line">  <span class="comment">//routes.IgnoreRoute(&quot;&#123;resource&#125;.aspx/&#123;*pathInfo&#125;&quot;);</span></span><br><span class="line">  <span class="comment">//routes.IgnoreRoute(&quot;&#123;resource&#125;.ashx/&#123;*pathInfo&#125;&quot;);</span></span><br><span class="line">  routes.IgnoreRoute(<span class="string">&quot;&#123;resource&#125;.aspx/&#123;*pathInfo&#125;&quot;</span>);</span><br><span class="line">  routes.IgnoreRoute(<span class="string">&quot;&#123;handler&#125;.ashx/&#123;*pathInfo&#125;&quot;</span>);</span><br><span class="line">  routes.IgnoreRoute(<span class="string">&quot;Handlers/&#123;handler&#125;.aspx/&#123;*pathInfo&#125;&quot;</span>);</span><br><span class="line">  routes.IgnoreRoute(<span class="string">&quot;ajaxpro/prototype.ashx&quot;</span>);</span><br><span class="line">  routes.IgnoreRoute(<span class="string">&quot;ajaxpro/core.ashx&quot;</span>);</span><br><span class="line">  routes.IgnoreRoute(<span class="string">&quot;ajaxpro/converter.ashx&quot;</span>);</span><br><span class="line">  routes.IgnoreRoute(<span class="string">&quot;ajaxpro/&#123;resource&#125;.ashx&quot;</span>);</span><br><span class="line">  routes.IgnoreRoute(<span class="string">&quot;&#123;resource&#125;.asmx/&#123;*pathInfo&#125;&quot;</span>);</span><br><span class="line">  routes.MapRoute(</span><br><span class="line">   name: <span class="string">&quot;Default&quot;</span>,</span><br><span class="line">   url: <span class="string">&quot;&#123;controller&#125;/&#123;action&#125;/&#123;id&#125;&quot;</span>,</span><br><span class="line">   defaults: <span class="keyword">new</span> &#123; controller = <span class="string">&quot;Home&quot;</span>, action = <span class="string">&quot;Index&quot;</span>, id = UrlParameter.Optional &#125;</span><br><span class="line">  );</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="WebApiConfig-cs为WebApi的路由配置，参考代码："><a href="#WebApiConfig-cs为WebApi的路由配置，参考代码：" class="headerlink" title="WebApiConfig.cs为WebApi的路由配置，参考代码："></a><strong>WebApiConfig.cs为WebApi的路由配置，参考代码：</strong></h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">WebApiConfig</span></span><br><span class="line"> &#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Register</span>(<span class="params">HttpConfiguration config</span>)</span></span><br><span class="line">  &#123;</span><br><span class="line">   config.Routes.MapHttpRoute(</span><br><span class="line">    name: <span class="string">&quot;DefaultApi&quot;</span>,</span><br><span class="line">    routeTemplate: <span class="string">&quot;api/&#123;controller&#125;/&#123;id&#125;&quot;</span>,</span><br><span class="line">    defaults: <span class="keyword">new</span> &#123; id = RouteParameter.Optional &#125;</span><br><span class="line">   );</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h1 id="Global文件中Application-Start事件中加上如下代码，使程序启动MVC配置生效"><a href="#Global文件中Application-Start事件中加上如下代码，使程序启动MVC配置生效" class="headerlink" title="Global文件中Application_Start事件中加上如下代码，使程序启动MVC配置生效"></a><strong>Global文件中Application_Start事件中加上如下代码，使程序启动MVC配置生效</strong></h1><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">AreaRegistration.RegisterAllAreas();</span><br><span class="line">GlobalConfiguration.Configuration.Formatters.JsonFormatter.MediaTypeMappings.Add(<span class="keyword">new</span> QueryStringMapping(<span class="string">&quot;json&quot;</span>, <span class="string">&quot;true&quot;</span>, <span class="string">&quot;application/json&quot;</span>));</span><br><span class="line">WebApiConfig.Register(GlobalConfiguration.Configuration);</span><br><span class="line">FilterConfig.RegisterGlobalFilters(GlobalFilters.Filters);</span><br><span class="line">RouteConfig.RegisterRoutes(RouteTable.Routes);</span><br><span class="line">BundleConfig.RegisterBundles(BundleTable.Bundles);</span><br><span class="line">GlobalConfiguration.Configuration.Formatters.XmlFormatter.SupportedMediaTypes.Clear(); </span><br></pre></td></tr></table></figure><h1 id="新建Controllers文件夹，在里面加上控制器类"><a href="#新建Controllers文件夹，在里面加上控制器类" class="headerlink" title="新建Controllers文件夹，在里面加上控制器类"></a><strong>新建Controllers文件夹，在里面加上控制器类</strong></h1><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DocRecController</span> : <span class="title">Controller</span></span><br><span class="line"> &#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> ActionResult <span class="title">Index</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">   ViewBag.UserName = <span class="string">&quot;wilson.fu&quot;</span>;<span class="keyword">return</span> View();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="新建Views文件夹，里面加上对应视图文件，如果需要使用模板，还需增加-ViewStart-cshtml-文件，例如DocRec-x2F-Index-cshtml，文件如下"><a href="#新建Views文件夹，里面加上对应视图文件，如果需要使用模板，还需增加-ViewStart-cshtml-文件，例如DocRec-x2F-Index-cshtml，文件如下" class="headerlink" title="新建Views文件夹，里面加上对应视图文件，如果需要使用模板，还需增加_ViewStart.cshtml 文件，例如DocRec&#x2F;Index.cshtml，文件如下"></a><strong>新建Views文件夹，里面加上对应视图文件，如果需要使用模板，还需增加_ViewStart.cshtml 文件，例如DocRec&#x2F;Index.cshtml，文件如下</strong></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@&#123;</span><br><span class="line"> <span class="title class_">Layout</span> = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"> <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"> <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"> <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"> <span class="tag">&lt;<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  @ViewBag.UserName</span></span><br><span class="line"><span class="language-xml"> <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="Views文件夹下还需要加上Web-config文件进行请求过滤"><a href="#Views文件夹下还需要加上Web-config文件进行请求过滤" class="headerlink" title="Views文件夹下还需要加上Web.config文件进行请求过滤"></a><strong>Views文件夹下还需要加上Web.config文件进行请求过滤</strong></h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">configSections</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">sectionGroup</span> <span class="attr">name</span>=<span class="string">&quot;system.web.webPages.razor&quot;</span> <span class="attr">type</span>=<span class="string">&quot;System.Web.WebPages.Razor.Configuration.RazorWebSectionGroup, System.Web.WebPages.Razor, Version=2.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">section</span> <span class="attr">name</span>=<span class="string">&quot;host&quot;</span> <span class="attr">type</span>=<span class="string">&quot;System.Web.WebPages.Razor.Configuration.HostSection, System.Web.WebPages.Razor, Version=2.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35&quot;</span> <span class="attr">requirePermission</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">section</span> <span class="attr">name</span>=<span class="string">&quot;pages&quot;</span> <span class="attr">type</span>=<span class="string">&quot;System.Web.WebPages.Razor.Configuration.RazorPagesSection, System.Web.WebPages.Razor, Version=2.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35&quot;</span> <span class="attr">requirePermission</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">sectionGroup</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">configSections</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">system.web.webPages.razor</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">host</span> <span class="attr">factoryType</span>=<span class="string">&quot;System.Web.Mvc.MvcWebRazorHostFactory, System.Web.Mvc, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35&quot;</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">pages</span> <span class="attr">pageBaseType</span>=<span class="string">&quot;System.Web.Mvc.WebViewPage&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">namespaces</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">add</span> <span class="attr">namespace</span>=<span class="string">&quot;System.Web.Mvc&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">add</span> <span class="attr">namespace</span>=<span class="string">&quot;System.Web.Mvc.Ajax&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">add</span> <span class="attr">namespace</span>=<span class="string">&quot;System.Web.Mvc.Html&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">add</span> <span class="attr">namespace</span>=<span class="string">&quot;System.Web.Routing&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">namespaces</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">pages</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">system.web.webPages.razor</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">appSettings</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">add</span> <span class="attr">key</span>=<span class="string">&quot;webpages:Enabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">appSettings</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">system.web</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">httpHandlers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">add</span> <span class="attr">path</span>=<span class="string">&quot;*&quot;</span> <span class="attr">verb</span>=<span class="string">&quot;*&quot;</span> <span class="attr">type</span>=<span class="string">&quot;System.Web.HttpNotFoundHandler&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">httpHandlers</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  在视图页面中启用请求验证将导致验证在</span></span><br><span class="line"><span class="comment">  控制器已对输入进行处理后发生。默认情况下，</span></span><br><span class="line"><span class="comment">  MVC 在控制器处理输入前执行请求验证。</span></span><br><span class="line"><span class="comment">  若要更改此行为，请对控制器或操作</span></span><br><span class="line"><span class="comment">  应用 ValidateInputAttribute。</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">pages</span></span></span><br><span class="line"><span class="tag">  <span class="attr">validateRequest</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">pageParserFilterType</span>=<span class="string">&quot;System.Web.Mvc.ViewTypeParserFilter, System.Web.Mvc, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">pageBaseType</span>=<span class="string">&quot;System.Web.Mvc.ViewPage, System.Web.Mvc, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">userControlBaseType</span>=<span class="string">&quot;System.Web.Mvc.ViewUserControl, System.Web.Mvc, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">controls</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">add</span> <span class="attr">assembly</span>=<span class="string">&quot;System.Web.Mvc, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35&quot;</span> <span class="attr">namespace</span>=<span class="string">&quot;System.Web.Mvc&quot;</span> <span class="attr">tagPrefix</span>=<span class="string">&quot;mvc&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">controls</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">pages</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">system.web</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">system.webServer</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">validation</span> <span class="attr">validateIntegratedModeConfiguration</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">handlers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">remove</span> <span class="attr">name</span>=<span class="string">&quot;BlockViewHandler&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">add</span> <span class="attr">name</span>=<span class="string">&quot;BlockViewHandler&quot;</span> <span class="attr">path</span>=<span class="string">&quot;*&quot;</span> <span class="attr">verb</span>=<span class="string">&quot;*&quot;</span> <span class="attr">preCondition</span>=<span class="string">&quot;integratedMode&quot;</span> <span class="attr">type</span>=<span class="string">&quot;System.Web.HttpNotFoundHandler&quot;</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">handlers</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">system.webServer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="note info simple"><p>本篇文章转载于<a href="https://bbs.mymyjd.cn/article_7223.html">https://bbs.mymyjd.cn/article_7223.html</a></p></div>]]></content>
      
      
      <categories>
          
          <category> ASP.NET </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WebForm </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
